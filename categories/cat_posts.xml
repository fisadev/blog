<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blog (fisa) (Posts about posts)</title><link>http://blog.fisadev.com/</link><description></description><atom:link href="http://blog.fisadev.com/categories/cat_posts.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Tue, 15 Aug 2023 00:02:28 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>How to deploy a Django app in Render.com (free tier)</title><link>http://blog.fisadev.com/posts/how-to-deploy-a-django-app-in-rendercom-free-tier/</link><dc:creator>Juan Pedro Fisanotti</dc:creator><description>&lt;section id="how-to-deploy-a-django-app-in-render-com-free-tier"&gt;
&lt;h2&gt;How to deploy a Django app in Render.com (free tier)&lt;/h2&gt;
&lt;p&gt;This is a basic tutorial on how to deploy a Django app to Render.com, focused on using only the free tier features and automating things as much as possible.
This also doesn't cover how to do a Django app, it assumes you already have a working app that you just need to deploy.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="assumptions"&gt;
&lt;h2&gt;Assumptions&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;You have a working Django app (for instance, you can already run it locally with &lt;code class="docutils literal"&gt;python manage.py runserver&lt;/code&gt; and everything works fine).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You're using Django 4 or newer (tested up to Django 4.2.4), and your project structure is what Django does by default.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Your Django project is in a Github or Gitlab repository.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There's a single Django project in the repo, not multiple projects at once, and you don't have.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You want to use Postgres as your production database in Render.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="render-com-account"&gt;
&lt;h2&gt;0: Render.com account&lt;/h2&gt;
&lt;p&gt;Just go to &lt;a class="reference external" href="http://render.com"&gt;Render.com&lt;/a&gt;, create a user (if you don't already have one), activate your account, and sign in to the &lt;a class="reference external" href="https://dashboard.render.com/"&gt;Dashboard&lt;/a&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="defining-dependencies"&gt;
&lt;h2&gt;1: Defining dependencies&lt;/h2&gt;
&lt;p&gt;Create a &lt;code class="docutils literal"&gt;requirements.txt&lt;/code&gt; file in the root of your repository, and add these dependencies in it:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a id="rest_code_ce0eeb3fe7b8487eabeea05e1b03a8c1-1" name="rest_code_ce0eeb3fe7b8487eabeea05e1b03a8c1-1"&gt;&lt;/a&gt;django==4.2.4
&lt;a id="rest_code_ce0eeb3fe7b8487eabeea05e1b03a8c1-2" name="rest_code_ce0eeb3fe7b8487eabeea05e1b03a8c1-2"&gt;&lt;/a&gt;dj-database-url==2.0.0
&lt;a id="rest_code_ce0eeb3fe7b8487eabeea05e1b03a8c1-3" name="rest_code_ce0eeb3fe7b8487eabeea05e1b03a8c1-3"&gt;&lt;/a&gt;psycopg2-binary==2.9.7
&lt;a id="rest_code_ce0eeb3fe7b8487eabeea05e1b03a8c1-4" name="rest_code_ce0eeb3fe7b8487eabeea05e1b03a8c1-4"&gt;&lt;/a&gt;whitenoise[brotli]==6.5.0
&lt;a id="rest_code_ce0eeb3fe7b8487eabeea05e1b03a8c1-5" name="rest_code_ce0eeb3fe7b8487eabeea05e1b03a8c1-5"&gt;&lt;/a&gt;gunicorn==21.2.0
&lt;/pre&gt;&lt;p&gt;If you already have a &lt;code class="docutils literal"&gt;requirements.txt&lt;/code&gt;, just add the new packages to it.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="creating-deploy-scripts"&gt;
&lt;h2&gt;2: Creating deploy scripts&lt;/h2&gt;
&lt;p&gt;You will need two scripts: one that builds the web app server (installs dependencies, updates the database structure, etc), and another one that runs your web app.
Render will use these two scripts when you want to deploy your web app.&lt;/p&gt;
&lt;p&gt;Create a &lt;code class="docutils literal"&gt;build.sh&lt;/code&gt; file in the root of your repository, with these contents:&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a id="rest_code_316b3f6cda6b446794aeb2ebb8d86846-1" name="rest_code_316b3f6cda6b446794aeb2ebb8d86846-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# exit on error&lt;/span&gt;
&lt;a id="rest_code_316b3f6cda6b446794aeb2ebb8d86846-2" name="rest_code_316b3f6cda6b446794aeb2ebb8d86846-2"&gt;&lt;/a&gt;&lt;span class="nb"&gt;set&lt;/span&gt; -o errexit
&lt;a id="rest_code_316b3f6cda6b446794aeb2ebb8d86846-3" name="rest_code_316b3f6cda6b446794aeb2ebb8d86846-3"&gt;&lt;/a&gt;
&lt;a id="rest_code_316b3f6cda6b446794aeb2ebb8d86846-4" name="rest_code_316b3f6cda6b446794aeb2ebb8d86846-4"&gt;&lt;/a&gt;pip install -r ./requirements.txt
&lt;a id="rest_code_316b3f6cda6b446794aeb2ebb8d86846-5" name="rest_code_316b3f6cda6b446794aeb2ebb8d86846-5"&gt;&lt;/a&gt;
&lt;a id="rest_code_316b3f6cda6b446794aeb2ebb8d86846-6" name="rest_code_316b3f6cda6b446794aeb2ebb8d86846-6"&gt;&lt;/a&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;dirname &lt;span class="k"&gt;$(&lt;/span&gt;find . &lt;span class="p"&gt;|&lt;/span&gt; grep manage.py$&lt;span class="k"&gt;))&lt;/span&gt;
&lt;a id="rest_code_316b3f6cda6b446794aeb2ebb8d86846-7" name="rest_code_316b3f6cda6b446794aeb2ebb8d86846-7"&gt;&lt;/a&gt;python manage.py collectstatic --no-input
&lt;a id="rest_code_316b3f6cda6b446794aeb2ebb8d86846-8" name="rest_code_316b3f6cda6b446794aeb2ebb8d86846-8"&gt;&lt;/a&gt;python manage.py migrate
&lt;a id="rest_code_316b3f6cda6b446794aeb2ebb8d86846-9" name="rest_code_316b3f6cda6b446794aeb2ebb8d86846-9"&gt;&lt;/a&gt;python manage.py createsuperuser --username admin --email &lt;span class="s2"&gt;"YOUR@EMAIL.com"&lt;/span&gt; --noinput &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;In that script, replace &lt;code class="docutils literal"&gt;YOUR@EMAIL.com&lt;/code&gt; with your real email.&lt;/p&gt;
&lt;p&gt;Then create a &lt;code class="docutils literal"&gt;run.sh&lt;/code&gt; file in the root of your repository, with these contents:&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a id="rest_code_fd6833d587f54467a15b9d60d1c5fc98-1" name="rest_code_fd6833d587f54467a15b9d60d1c5fc98-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# exit on error&lt;/span&gt;
&lt;a id="rest_code_fd6833d587f54467a15b9d60d1c5fc98-2" name="rest_code_fd6833d587f54467a15b9d60d1c5fc98-2"&gt;&lt;/a&gt;&lt;span class="nb"&gt;set&lt;/span&gt; -o errexit
&lt;a id="rest_code_fd6833d587f54467a15b9d60d1c5fc98-3" name="rest_code_fd6833d587f54467a15b9d60d1c5fc98-3"&gt;&lt;/a&gt;
&lt;a id="rest_code_fd6833d587f54467a15b9d60d1c5fc98-4" name="rest_code_fd6833d587f54467a15b9d60d1c5fc98-4"&gt;&lt;/a&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;dirname &lt;span class="k"&gt;$(&lt;/span&gt;find . &lt;span class="p"&gt;|&lt;/span&gt; grep manage.py$&lt;span class="k"&gt;))&lt;/span&gt;
&lt;a id="rest_code_fd6833d587f54467a15b9d60d1c5fc98-5" name="rest_code_fd6833d587f54467a15b9d60d1c5fc98-5"&gt;&lt;/a&gt;gunicorn &lt;span class="k"&gt;$(&lt;/span&gt;dirname &lt;span class="k"&gt;$(&lt;/span&gt;find . &lt;span class="p"&gt;|&lt;/span&gt; grep wsgi.py$&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sed &lt;span class="s2"&gt;"s/\.\///g"&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;.wsgi:application
&lt;/pre&gt;&lt;p&gt;If you have a less standard project or repo structure, you can replace the dark magic in those scripts: the &lt;code class="docutils literal"&gt;cd&lt;/code&gt; command just needs to get inside your Django project folder, and the &lt;code class="docutils literal"&gt;gunicorn&lt;/code&gt; command needs to look something like &lt;code class="docutils literal"&gt;gunicorn your_project_name.wsgi:application&lt;/code&gt;.
But for normal project structures, the dark magic should work just fine :)&lt;/p&gt;
&lt;/section&gt;
&lt;section id="django-settings-for-render"&gt;
&lt;h2&gt;3. Django settings for Render&lt;/h2&gt;
&lt;p&gt;Now you need to add this to the end of your &lt;code class="docutils literal"&gt;settings.py&lt;/code&gt; file:&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a id="rest_code_c9860905ba81449fb91781c778d623e3-1" name="rest_code_c9860905ba81449fb91781c778d623e3-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# code needed to deploy in Render.com:&lt;/span&gt;
&lt;a id="rest_code_c9860905ba81449fb91781c778d623e3-2" name="rest_code_c9860905ba81449fb91781c778d623e3-2"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;a id="rest_code_c9860905ba81449fb91781c778d623e3-3" name="rest_code_c9860905ba81449fb91781c778d623e3-3"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;dj_database_url&lt;/span&gt;
&lt;a id="rest_code_c9860905ba81449fb91781c778d623e3-4" name="rest_code_c9860905ba81449fb91781c778d623e3-4"&gt;&lt;/a&gt;
&lt;a id="rest_code_c9860905ba81449fb91781c778d623e3-5" name="rest_code_c9860905ba81449fb91781c778d623e3-5"&gt;&lt;/a&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;'RENDER'&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_c9860905ba81449fb91781c778d623e3-6" name="rest_code_c9860905ba81449fb91781c778d623e3-6"&gt;&lt;/a&gt;    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"USING RENDER.COM SETTINGS!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_c9860905ba81449fb91781c778d623e3-7" name="rest_code_c9860905ba81449fb91781c778d623e3-7"&gt;&lt;/a&gt;    &lt;span class="n"&gt;DEBUG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;
&lt;a id="rest_code_c9860905ba81449fb91781c778d623e3-8" name="rest_code_c9860905ba81449fb91781c778d623e3-8"&gt;&lt;/a&gt;    &lt;span class="n"&gt;ALLOWED_HOSTS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'RENDER_EXTERNAL_HOSTNAME'&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;a id="rest_code_c9860905ba81449fb91781c778d623e3-9" name="rest_code_c9860905ba81449fb91781c778d623e3-9"&gt;&lt;/a&gt;    &lt;span class="n"&gt;DATABASES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'default'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;dj_database_url&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conn_max_age&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;600&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
&lt;a id="rest_code_c9860905ba81449fb91781c778d623e3-10" name="rest_code_c9860905ba81449fb91781c778d623e3-10"&gt;&lt;/a&gt;    &lt;span class="n"&gt;MIDDLEWARE&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MIDDLEWARE&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'django.middleware.security.SecurityMiddleware'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a id="rest_code_c9860905ba81449fb91781c778d623e3-11" name="rest_code_c9860905ba81449fb91781c778d623e3-11"&gt;&lt;/a&gt;                      &lt;span class="s1"&gt;'whitenoise.middleware.WhiteNoiseMiddleware'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_c9860905ba81449fb91781c778d623e3-12" name="rest_code_c9860905ba81449fb91781c778d623e3-12"&gt;&lt;/a&gt;    &lt;span class="n"&gt;STATIC_ROOT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BASE_DIR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'staticfiles'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_c9860905ba81449fb91781c778d623e3-13" name="rest_code_c9860905ba81449fb91781c778d623e3-13"&gt;&lt;/a&gt;    &lt;span class="n"&gt;STATICFILES_STORAGE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'whitenoise.storage.CompressedManifestStaticFilesStorage'&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;This code basically overrides some of the settings of your project, so it can work well with what we are using inside Render.com: the database, the static files backend, etc.
But it only does that when it detects your project is running inside Render, otherwise it does nothing to your settings.&lt;/p&gt;
&lt;p&gt;You can further customize this if you have other settings that should have different values when running in Render.com.
Just remember to never put secret stuff in there, because this will be committed to your repo.
If you need to read any secret keys or values, you can use &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;os.environ.get('MY_SECRET_THING_XYZ')&lt;/span&gt;&lt;/code&gt; and then define the value for that environment variable in the Render dashboard.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="commit-everything"&gt;
&lt;h2&gt;4. Commit everything&lt;/h2&gt;
&lt;p&gt;Commit all your new files and modified files, and push the changes to your Github/Gitlab repo!&lt;/p&gt;
&lt;/section&gt;
&lt;section id="creating-your-postgres-database"&gt;
&lt;h2&gt;5. Creating your Postgres database&lt;/h2&gt;
&lt;p&gt;Go to &lt;a class="reference external" href="https://dashboard.render.com/"&gt;Render's dashboard&lt;/a&gt; and create a new Postgres database using this menu:&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://blog.fisadev.com/images/deploy-django-render/db_create_menu.png"&gt;&lt;img alt="/images/deploy-django-render/db_create_menu.thumbnail.png" src="http://blog.fisadev.com/images/deploy-django-render/db_create_menu.thumbnail.png"&gt;&lt;/a&gt;
&lt;p&gt;You will need to specify the database name and a few other fields.
After you created your database, open its details page from the dashboard and copy the value from this field, to use it in the next step:&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://blog.fisadev.com/images/deploy-django-render/db_url_field.png"&gt;&lt;img alt="/images/deploy-django-render/db_url_field.thumbnail.png" src="http://blog.fisadev.com/images/deploy-django-render/db_url_field.thumbnail.png"&gt;&lt;/a&gt;
&lt;/section&gt;
&lt;section id="deploying-your-app-at-render"&gt;
&lt;h2&gt;6. Deploying your app at Render&lt;/h2&gt;
&lt;p&gt;Go again to &lt;a class="reference external" href="https://dashboard.render.com/"&gt;Render's dashboard&lt;/a&gt; and create a new "Web service" using this menu:&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://blog.fisadev.com/images/deploy-django-render/web_create_menu.png"&gt;&lt;img alt="/images/deploy-django-render/web_create_menu.thumbnail.png" src="http://blog.fisadev.com/images/deploy-django-render/web_create_menu.thumbnail.png"&gt;&lt;/a&gt;
&lt;p&gt;In the first page you will need to either fill the url of a public Github or Gitlab repository, or login with your Github/Gitlab account to choose a private repository.
After you have specified your repo, in the next page you will need to fill out a few fields:&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://blog.fisadev.com/images/deploy-django-render/web_create_form.png"&gt;&lt;img alt="/images/deploy-django-render/web_create_form.thumbnail.png" src="http://blog.fisadev.com/images/deploy-django-render/web_create_form.thumbnail.png"&gt;&lt;/a&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Name: important, this will be part of the url of your deployed web app, so use something meaningful.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Root Directory: important to leave this empty, so all the code is ran from the root directory.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Runtime: must be Python.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Build command: here you will use your build script: &lt;code class="docutils literal"&gt;bash build.sh&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Start command: and here you will use your run script: &lt;code class="docutils literal"&gt;bash run.sh&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Scroll down, and click "Create Web Service".&lt;/p&gt;
&lt;p&gt;This will automatically attempt a first deploy, that will fail because we are missing a last step :).
Go to the "Environment" section of your web app inside Render:&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://blog.fisadev.com/images/deploy-django-render/web_env.png"&gt;&lt;img alt="/images/deploy-django-render/web_env.thumbnail.png" src="http://blog.fisadev.com/images/deploy-django-render/web_env.thumbnail.png"&gt;&lt;/a&gt;
&lt;p&gt;And add three environment variables (it's important that the names are UPPERCASE):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;DATABASE_URL&lt;/code&gt;: here you need to paste the database url that you copied at step 5. You can go to the database details to copy it again if needed.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;DJANGO_SUPERUSER_PASSWORD&lt;/code&gt;: here set a password that you want to use for your Django superuser.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;PYTHON_VERSION&lt;/code&gt;: set it to &lt;code class="docutils literal"&gt;3.11.0&lt;/code&gt; (or newer?).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now you can re-attempt the deploy, just hit this menu and everything should work!:&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://blog.fisadev.com/images/deploy-django-render/web_deploy.png"&gt;&lt;img alt="/images/deploy-django-render/web_deploy.thumbnail.png" src="http://blog.fisadev.com/images/deploy-django-render/web_deploy.thumbnail.png"&gt;&lt;/a&gt;
&lt;p&gt;After the deploy finishes, your website should be ready at &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;https://YOUR_RENDER_WEB_SERVICE_NAME.onrender.com/&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;section id="what-s-next"&gt;
&lt;h2&gt;What's next?&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Anytime you need to deploy a new version, you just push it to your repo, and you can use the manual deploy menu to re-deploy. You can even configure your Render app to use a different branch from your repository, so you can deploy from a "stable" branch instead.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The rest of Render's UI is pretty straightforward, explore it! There are plenty of useful things even in the free tier, including logs, usage metrics, etc.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The free tier doesn't include the web shell to access your running app directly, but you can still connect to it via ssh using the "Connect" button to the side of the ""Manual Deploy" one.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;</description><guid>http://blog.fisadev.com/posts/how-to-deploy-a-django-app-in-rendercom-free-tier/</guid><pubDate>Mon, 14 Aug 2023 22:10:17 GMT</pubDate></item><item><title>On AI killing art, and other fears</title><link>http://blog.fisadev.com/posts/art-killer-ai/</link><dc:creator>Juan Pedro Fisanotti</dc:creator><description>&lt;p&gt;A few hours ago, a friend and ex-student of mine asked me this on twitter:&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://blog.fisadev.com/images/art-killer-ai/lucas-question.png"&gt;&lt;img alt="/images/art-killer-ai/lucas-question.thumbnail.png" src="http://blog.fisadev.com/images/art-killer-ai/lucas-question.thumbnail.png"&gt;&lt;/a&gt;
&lt;p&gt;Basically, what were my thoughts on the artists vs content-generation AIs debate.&lt;/p&gt;
&lt;p&gt;I really wanted to answer in a couple of tweets. Believe me, I tried. But I can't, so instead of torturing him and any spectators with a kilometer-long twitter thread, I decided to make this a short-ish blog post :)&lt;/p&gt;
&lt;section id="disclaimer"&gt;
&lt;h2&gt;Disclaimer&lt;/h2&gt;
&lt;p&gt;My opinion on this topic is probably not the most objective one. I work with AI, I teach in a couple of university AI courses. I even do some AI projects for fun in my spare time.&lt;/p&gt;
&lt;p&gt;But at the same time, I care deeply for the ethics of AI and its impact in the world. I'm not a blind technology worshiper, I really want AI to be a &lt;em&gt;tool&lt;/em&gt;, used to build a better future for all, and I'm painfully aware that in its current forms it is already being misused a lot (concentrating power, amplifying discrimination, invading privacy, making people adicted to products, and so many other bad things). So I won't defend AI for the sake of AI progress.&lt;/p&gt;
&lt;p&gt;Still, don't forget that I'm not an artist, and artists should have a voice in this debate too.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="a-misconception"&gt;
&lt;h2&gt;A misconception&lt;/h2&gt;
&lt;p&gt;Before sharing any opinions I need to dispel a common misconception: that these AI models are plagiarizing content from artists. I'll be using image generation as the main example, but the same applies to lots of content-generation AIs.&lt;/p&gt;
&lt;p&gt;These AIs don't plagiarize (most of them, the amazing ones making the news at least). These AIs aren't memorizing, copying existing work and reproducing it as their own. That's simply not how they work. I won't go deep into that, but what you need to understand is that these AI models &lt;em&gt;learn&lt;/em&gt; (concepts, styles, techniques, etc), and then &lt;em&gt;generate&lt;/em&gt; novel content based on what they've learned.&lt;/p&gt;
&lt;p&gt;The process is in many ways similar to how humans learn skills: the AI learns by watching a ton of examples, trying to do its own stuff, and receiving feedback on how good the stuff was. Given enough time, the AI model ends up being pretty good at the thing you wanted it to do.&lt;/p&gt;
&lt;p&gt;Learning styles, concepts, techniques, and more from the contents (art) of others, to then be able to create your own novel art, was never considered “plagiarizing”. And it would be a VERY bad idea to try to classify that as plagiarizing. Basically because that’s how human artists work too, you would end up banning the artistic process itself, because no artist is born from the ether knowing how to create art, nor is any artist able to create a new branch of art from nothing. We humans always learn from others. And now computers too.&lt;/p&gt;
&lt;p&gt;With that out of the way, now my opinion on the four biggest fears/discussions I’ve seen repeated multiple times:&lt;/p&gt;
&lt;/section&gt;
&lt;section id="ai-art-will-destroy-human-art"&gt;
&lt;h2&gt;1. AI art will destroy human art&lt;/h2&gt;
&lt;a class="reference external image-reference" href="http://blog.fisadev.com/images/art-killer-ai/robot_artist.png"&gt;&lt;img alt="/images/art-killer-ai/robot_artist.thumbnail.png" src="http://blog.fisadev.com/images/art-killer-ai/robot_artist.thumbnail.png"&gt;&lt;/a&gt;
&lt;p&gt;I’ve seen quite a few people arguing that when computers can do art faster and more efficiently than humans, human art itself will die. There will be no more human artists, computers will replace that as they’ve replaced so many other manual tasks.&lt;/p&gt;
&lt;p&gt;Honestly, I found this one hilarious. Mostly because people saying this sound like they have &lt;em&gt;never&lt;/em&gt; spoken to a real, human artist.&lt;/p&gt;
&lt;p&gt;Humans do art for &lt;em&gt;lots&lt;/em&gt; of different reasons. Love, pleasure, to express feelings, to share ideas, to call for action, to relax, to improve themselves, to have fun, and so much more. People enjoy CREATING art, not just consuming it!
If a computer can now create art too, so what? Most artists will keep doing art anyway because they feel amazing when &lt;em&gt;doing their own art&lt;/em&gt;!&lt;/p&gt;
&lt;p&gt;Would you stop eating ice cream just because a new computer can eat ice cream faster than you? How silly is that?&lt;/p&gt;
&lt;p&gt;Human art won’t die. Stop panicking over that one.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="ai-art-will-destroy-paid-human-artists"&gt;
&lt;h2&gt;2. AI art will destroy &lt;em&gt;paid&lt;/em&gt; human artists&lt;/h2&gt;
&lt;a class="reference external image-reference" href="http://blog.fisadev.com/images/art-killer-ai/robot_money.png"&gt;&lt;img alt="/images/art-killer-ai/robot_money.thumbnail.png" src="http://blog.fisadev.com/images/art-killer-ai/robot_money.thumbnail.png"&gt;&lt;/a&gt;
&lt;p&gt;This one might sound similar, but is not the same as the previous fear. Even though sometimes in discussions they’re both mixed together as one.&lt;/p&gt;
&lt;p&gt;I absolutely believe human artists will keep doing art for the love of it. But there’s a catch: not all art/content is produced, and especially &lt;em&gt;sold&lt;/em&gt;, just for the love of art itself. Some forms of content are produced and paid just for utilitary reasons… and those are at risk of some huge impact, in my opinion.&lt;/p&gt;
&lt;p&gt;The person buying a painting out of admiration for the person creating it, or listening to a song for the deep connection they feel with the artist, will probably keep consuming their favorite human’s art even if the AI produced art is cheaper or more easily available. The human author is part of the reason they want to consume that particular art form, and the AI art isn’t replacing that human connection.&lt;/p&gt;
&lt;p&gt;But the person buying a cartoon for an ad of a children’s toy? Or the person needing a background song for a youtube video? Or the person designing a christmas card for their company? Well, those will definitely buy cheap AI art instead of paying for expensive human handcrafted art. And I’m pretty sure AI art will be cheaper, and easier to get. Maybe even for free.&lt;/p&gt;
&lt;p&gt;So, yes, there will be an impact on some artists' income, we can’t deny that. It’s not a new problem, we’ve had a similar problem in the past: radio vs local musicians, widespread movie theaters and tv vs theater actors, ice sellers vs widespread fridges, factory workers vs robots, and so on.&lt;/p&gt;
&lt;p&gt;IMHO, this is not just a problem in art: AI and other forms of automation will keep replacing humans in lots of jobs. That trend is not going anywhere, and will probably even accelerate. So the sooner we evolve into a society where people don’t need a job to be able to eat, the better…&lt;/p&gt;
&lt;p&gt;So, human artists disappearing? Not a chance.
Human artists having trouble selling “utilitary” art? Yep, that will happen.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="permission-to-learn"&gt;
&lt;h2&gt;3. Permission to learn&lt;/h2&gt;
&lt;a class="reference external image-reference" href="http://blog.fisadev.com/images/art-killer-ai/padlock_book.png"&gt;&lt;img alt="/images/art-killer-ai/padlock_book.thumbnail.png" src="http://blog.fisadev.com/images/art-killer-ai/padlock_book.thumbnail.png"&gt;&lt;/a&gt;
&lt;p&gt;Another big discussion being held in many places, relates to the basic question of the fairness (or even legality) of using other people’s art/content to train your own AI model. Even if the model doesn’t plagiarize the content, just the act of learning from it, some people argue, should require some form of compensation or permission at least. Even being able to prevent that from happening.&lt;/p&gt;
&lt;p&gt;This, I think, is a well intentioned discussion with a terribly short-sighted proposal for a solution, that will absolutely backfire if implemented. And I think that because of two different reasons:&lt;/p&gt;
&lt;p&gt;First:&lt;/p&gt;
&lt;p&gt;Humans have always been able to learn from what they can see, for free. Yes, on many occasions you are required to pay to be able to &lt;em&gt;access&lt;/em&gt; something, and then you can use that to learn (and I really hate that humanity is like that… I strongly believe knowledge should be free). But at least you are never required to ask for permission, or pay, to &lt;em&gt;learn&lt;/em&gt; from something you have accessed (paid access or not). Once your senses perceive something, you are absolutely free to learn (or not!) from it, and no one can stop you. And gosh, I’m thankful that capitalism hasn’t yet destroyed that for us.
Please, don’t lay the foundations for that to happen…&lt;/p&gt;
&lt;p&gt;Second:&lt;/p&gt;
&lt;p&gt;I know that people pushing these proposals are doing so to protect artists, and that’s a super noble goal. But requiring “permission/payment to learn” is absolutely not going to protect or help artists. Really.
How do I know? Because as a society we already tried that solution, several times in different contexts, and it always failed astronomically.&lt;/p&gt;
&lt;p&gt;We wanted to protect small inventors from big corporations using their inventions and benefiting from them for free. So we designed patents: “permission/payment to use your invention”. The result? Big corporations literally hoard thousands of patents and then use them to destroy smaller competitors. You have your patent and want to sue me? Good luck! I have an army of lawyers and 2896 patents which I’m pretty sure contain enough to sue you 10 times over.&lt;/p&gt;
&lt;p&gt;We wanted to protect artists from big corporations using their art for free and benefiting from it (sounds familiar??). So we designed copyright: “permission/payment to use your art”.
The result? Big corporations abuse their position to hoard legal ownership of art, which nowadays is almost never owned by the artists themselves, and then use that to squeeze all the money they can from anyone trying to share said art. Corporations make millions, the artists get pennies, the public is constantly fighting for fair use while corporations try to paywall or silence any kind of use, etc.&lt;/p&gt;
&lt;p&gt;So, what do you think will happen if, to protect artists from corporations using their art to train models for free, we try to design some “permission/payment to train” process?
Hint: corporations have lots of money, lots of lawyers, and lots of art ownership rights. Artists and the rest of us, don’t.
It’s almost as if solving problems by “requiring money to do X”, always ends up benefiting those guys with lots of money instead.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="the-powerful-getting-more-powerful"&gt;
&lt;h2&gt;4. The powerful getting more powerful&lt;/h2&gt;
&lt;a class="reference external image-reference" href="http://blog.fisadev.com/images/art-killer-ai/concentration.png"&gt;&lt;img alt="/images/art-killer-ai/concentration.thumbnail.png" src="http://blog.fisadev.com/images/art-killer-ai/concentration.thumbnail.png"&gt;&lt;/a&gt;
&lt;p&gt;Finally, there’s one last fear that I deeply share, because it’s my main fear with AI in general, not just for content generation: power keeps getting concentrated.&lt;/p&gt;
&lt;p&gt;These AI models require &lt;em&gt;a lot&lt;/em&gt; of money to train. The datasets are huge, the training process is incredibly consuming. Not to mention the work of so many (absolutely not cheap) specialists who do the research, and then productivize the models.
So only big players are able to train the best models. Only big corporations or organizations can afford to do so. And the trend, while sometimes reversing a tiny bit, in general points towards that problem getting worse with every new generation of AI models: bigger models, more data, more money.&lt;/p&gt;
&lt;p&gt;And at the same time, no one can deny the power of having these tools. From the new business models they enable, to the incredible advantages they might provide over traditional competitors. And then there are the darker use cases, like weaponizing realistically-sounding fake news generation.&lt;/p&gt;
&lt;p&gt;Those two factors combined (cost required vs power gained), mean that we, as a society, continue walking a path in which the powerful are getting even more powerful, while the rest of us have less and less chances of reclaiming that power. Those who can train these models, will have a greater edge over the rest of society. And those are usually big corporations, of which the rest of society has very little control.&lt;/p&gt;
&lt;p&gt;Again, this is not particular to AI content generation. This is a problem with AI in general. But I’ve seen people raising this question in the AI art discussions, and it’s a really fair point. And I don’t have an answer for it :(&lt;/p&gt;
&lt;/section&gt;
&lt;section id="too-long-didnt-read"&gt;
&lt;h2&gt;Too long, didn’t read&lt;/h2&gt;
&lt;p&gt;Human art won’t die. But artists selling “utilitary” art should be worried. Requiring permission to train from art is going to backfire like crazy. And we keep giving more and more power to the already powerful, that’s bad.&lt;/p&gt;
&lt;p&gt;And yes, of course the images in this post are AI generated ;)&lt;/p&gt;
&lt;/section&gt;</description><guid>http://blog.fisadev.com/posts/art-killer-ai/</guid><pubDate>Fri, 16 Dec 2022 04:30:00 GMT</pubDate></item><item><title>Programar STM32F103C8 en Ubuntu con Arduino IDE</title><link>http://blog.fisadev.com/posts/programar-stm32f103c8-en-ubuntu-con-arduino-ide/</link><dc:creator>Juan Pedro Fisanotti</dc:creator><description>&lt;p&gt;Hacer andar una placa STM32F103C8 (o cualquier STM32 de hecho) con Arduino IDE en Ubuntu no es tan simple, hay muchos tutoriales e info contradictoria en la web.&lt;/p&gt;
&lt;p&gt;Esto es lo que en mi caso funcionó, en un Ubuntu 20.04 LTS.&lt;/p&gt;
&lt;p&gt;Este tutorial asume que ya tienen instalado Arduino IDE, de una versión relativamente actual.&lt;/p&gt;
&lt;section id="paso-1-agregar-soporte-de-stm32-en-arduino-ide"&gt;
&lt;h2&gt;Paso 1: Agregar soporte de STM32 en Arduino IDE&lt;/h2&gt;
&lt;p&gt;Lo primero que hay que hacer es instalar los plugins necesarios en Arduino IDE, para que el editor sepa compilar y grabar programas en las placas STM32.&lt;/p&gt;
&lt;p&gt;Para ello tenemos que ir al menú "File", opción "Preferences", y en la ventana que se nos abre, clickear el botón que está al lado de Additional Board Manager URLs:&lt;/p&gt;
&lt;img alt="/images/programar-stm32f103c8-en-ubuntu-con-arduino-ide/menu_preferences.png" src="http://blog.fisadev.com/images/programar-stm32f103c8-en-ubuntu-con-arduino-ide/menu_preferences.png"&gt;
&lt;img alt="/images/programar-stm32f103c8-en-ubuntu-con-arduino-ide/boton_boards_urls.png" src="http://blog.fisadev.com/images/programar-stm32f103c8-en-ubuntu-con-arduino-ide/boton_boards_urls.png"&gt;
&lt;p&gt;En la segunda ventana que se nos abre debemos agregar la URL de donde Arduino IDE va a bajar toda la información de estas placas. La url es esta:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a id="rest_code_f84523f62d1b4cd690f333bc6ab8a23f-1" name="rest_code_f84523f62d1b4cd690f333bc6ab8a23f-1"&gt;&lt;/a&gt;http://dan.drown.org/stm32duino/package_STM32duino_index.json
&lt;/pre&gt;&lt;p&gt;Y debe agregarse al final, en un renglón nuevo (si es que ya teníamos otras URLs en esta configuración, como es mi caso), y clickear en "Ok":&lt;/p&gt;
&lt;img alt="/images/programar-stm32f103c8-en-ubuntu-con-arduino-ide/board_url_agregada.png" src="http://blog.fisadev.com/images/programar-stm32f103c8-en-ubuntu-con-arduino-ide/board_url_agregada.png"&gt;
&lt;p&gt;Luego debemos decirle a Arduino IDE que se baje desde esa URL la información que necesitamos para controlar nuestra placa STM32. Para ello vamos al menú "Tools", luego "Board", y elegimos la opción "Boards Manager..."&lt;/p&gt;
&lt;img alt="/images/programar-stm32f103c8-en-ubuntu-con-arduino-ide/menu_boards_manager.png" src="http://blog.fisadev.com/images/programar-stm32f103c8-en-ubuntu-con-arduino-ide/menu_boards_manager.png"&gt;
&lt;p&gt;En la ventana que se nos abre tenemos la posibilidad de filtrar la lista de plugins de Arduino IDE. Tenemos que buscar los que nos interesan, escribiendo "STM32" en la caja de búsqueda. Y de los resultados, tenemos que elegir el que dice "STM32F1xx/GD32F1xx boards". Luego de elegirlo nos va a aparecer un botón de "Install" para ese plugin, al que le hacemos click y esperamos que termine el progreso de la instalación.&lt;/p&gt;
&lt;img alt="/images/programar-stm32f103c8-en-ubuntu-con-arduino-ide/install_stm32_plugin.png" src="http://blog.fisadev.com/images/programar-stm32f103c8-en-ubuntu-con-arduino-ide/install_stm32_plugin.png"&gt;
&lt;p&gt;Cuando termina su instalación, podemos cerrar la ventana del Board Manager.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="paso-2-elegir-nuestra-placa-y-la-forma-de-programarla"&gt;
&lt;h2&gt;Paso 2: Elegir nuestra placa y la forma de programarla&lt;/h2&gt;
&lt;p&gt;Ahora tenemos que decirle a Arduino IDE que queremos trabajar con esa placa nueva que instalamos. Para ello elegimos en el menú "Tools", "Board", "STM32F1 Boards", la opción "Generic STM32F103C series":&lt;/p&gt;
&lt;img alt="/images/programar-stm32f103c8-en-ubuntu-con-arduino-ide/elegir_board.png" src="http://blog.fisadev.com/images/programar-stm32f103c8-en-ubuntu-con-arduino-ide/elegir_board.png"&gt;
&lt;p&gt;Al hacer eso se nos van a agregar algunas opciones nuevas en el menú "Tools", de las cuales tenemos que elegir dos más:&lt;/p&gt;
&lt;p&gt;"Tools", "Variant", "STM32F103C8"&lt;/p&gt;
&lt;img alt="/images/programar-stm32f103c8-en-ubuntu-con-arduino-ide/elegir_variant.png" src="http://blog.fisadev.com/images/programar-stm32f103c8-en-ubuntu-con-arduino-ide/elegir_variant.png"&gt;
&lt;p&gt;"Tools", "Upload Method", "STLink"&lt;/p&gt;
&lt;img alt="/images/programar-stm32f103c8-en-ubuntu-con-arduino-ide/elegir_upload.png" src="http://blog.fisadev.com/images/programar-stm32f103c8-en-ubuntu-con-arduino-ide/elegir_upload.png"&gt;
&lt;/section&gt;
&lt;section id="paso-3-arreglar-cosas-que-no-deberian-estar-rotas"&gt;
&lt;h2&gt;Paso 3: Arreglar cosas que no deberían estar rotas&lt;/h2&gt;
&lt;p&gt;Con los pasos que hicimos antes, en un mundo ideal y con placas más normales, ya todo queda listo para poder programar, hacer click en Play, y que nuestro código corra en la placa que tenemos conectada a la PC. Pero en el caso de las STM32 esto está roto, y hay que hacer algunos pasos manuales para arreglarlo. Los descubrí probando y renegando, y probablemente esto cambie en el futuro.&lt;/p&gt;
&lt;p&gt;En particular: el plugin de Arduino IDE para las STM trae dentro un programita que se usa para flashear la placa, llamado "stlink-tools". Pero el problema es que trae una versión vieja y rota (al menos rota en entornos modernos).&lt;/p&gt;
&lt;p&gt;Así que lo primero que vamos a hacer, es eliminar esa versión vieja de ese programita que no sirve de dentro del plugin. Lo hacemos corriendo este comando en una terminal de linux:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a id="rest_code_5a67ca10d7c84a56a6cc250e888a6001-1" name="rest_code_5a67ca10d7c84a56a6cc250e888a6001-1"&gt;&lt;/a&gt;rm ~/.arduino15/packages/stm32duino/tools/stm32tools/2021.5.31/linux/stlink/st-*
&lt;/pre&gt;&lt;p&gt;Si el comando dispara un error diciendo que los archivos no existen, lo más probable es que tengan alguna versión diferente o de Arduino IDE, o del plugin. En ese caso van a necesitar encontrar cuál es la ruta para el caso particular de ustedes (probablemente si es otra versión de Arduino IDE, cambie el nombre del directorio &lt;cite&gt;.arduino15&lt;/cite&gt;, o si es otra versión del plugin, cambie el nombre del directorio &lt;cite&gt;2021.5.31&lt;/cite&gt;).&lt;/p&gt;
&lt;p&gt;Una vez borrados esos archivos, tenemos que instalar una mejor versión de la herramienta "stlink-tools". Hacemos eso con este comando:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a id="rest_code_5826e40f2053493b935f35189d6fa2ac-1" name="rest_code_5826e40f2053493b935f35189d6fa2ac-1"&gt;&lt;/a&gt;sudo apt install stlink-tools
&lt;/pre&gt;&lt;p&gt;Esperamos a que termine de bajar e instalar, y luego tenemos que hacer un último pasito: indicarle a Arduino IDE que use nuestro nuevo stlink tools. Para ello corremos estos tres comandos. Pero ojo!! La ruta que estamos usando acá tiene que ser la misma que la que usamos antes para borrar el viejo stlink tools del plugin. Si cambiamos algún nombre de directorio en el paso de borrado, acá también deberíamos cambiarlo de la misma forma:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a id="rest_code_532bd88b8ac8437c9566e7fe06064125-1" name="rest_code_532bd88b8ac8437c9566e7fe06064125-1"&gt;&lt;/a&gt;ln -s /usr/bin/st-flash ~/.arduino15/packages/stm32duino/tools/stm32tools/2021.5.31/linux/stlink/
&lt;a id="rest_code_532bd88b8ac8437c9566e7fe06064125-2" name="rest_code_532bd88b8ac8437c9566e7fe06064125-2"&gt;&lt;/a&gt;ln -s /usr/bin/st-info ~/.arduino15/packages/stm32duino/tools/stm32tools/2021.5.31/linux/stlink/
&lt;a id="rest_code_532bd88b8ac8437c9566e7fe06064125-3" name="rest_code_532bd88b8ac8437c9566e7fe06064125-3"&gt;&lt;/a&gt;ln -s /usr/bin/st-util ~/.arduino15/packages/stm32duino/tools/stm32tools/2021.5.31/linux/stlink/
&lt;/pre&gt;&lt;/section&gt;
&lt;section id="listo"&gt;
&lt;h2&gt;Listo!&lt;/h2&gt;
&lt;p&gt;Con estos pasos hechos, ya deberíamos poder hacer un programa de ejemplo en Arduino IDE, y al apretar el botón de play (la flecha hacia la derecha) nuestro programa debería ejecutarse en la placa :)&lt;/p&gt;
&lt;p&gt;Un programa de ejemplo que vi usado en muchos de los tutoriales (desconozco su autor original, si no lo linkearía):&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a id="rest_code_a9854f83603c4f6c8b6c61a4a5097266-1" name="rest_code_a9854f83603c4f6c8b6c61a4a5097266-1"&gt;&lt;/a&gt;const int ledPIN = PC13;
&lt;a id="rest_code_a9854f83603c4f6c8b6c61a4a5097266-2" name="rest_code_a9854f83603c4f6c8b6c61a4a5097266-2"&gt;&lt;/a&gt;
&lt;a id="rest_code_a9854f83603c4f6c8b6c61a4a5097266-3" name="rest_code_a9854f83603c4f6c8b6c61a4a5097266-3"&gt;&lt;/a&gt;void setup()
&lt;a id="rest_code_a9854f83603c4f6c8b6c61a4a5097266-4" name="rest_code_a9854f83603c4f6c8b6c61a4a5097266-4"&gt;&lt;/a&gt;{
&lt;a id="rest_code_a9854f83603c4f6c8b6c61a4a5097266-5" name="rest_code_a9854f83603c4f6c8b6c61a4a5097266-5"&gt;&lt;/a&gt;  pinMode(ledPIN, OUTPUT);
&lt;a id="rest_code_a9854f83603c4f6c8b6c61a4a5097266-6" name="rest_code_a9854f83603c4f6c8b6c61a4a5097266-6"&gt;&lt;/a&gt;}
&lt;a id="rest_code_a9854f83603c4f6c8b6c61a4a5097266-7" name="rest_code_a9854f83603c4f6c8b6c61a4a5097266-7"&gt;&lt;/a&gt;
&lt;a id="rest_code_a9854f83603c4f6c8b6c61a4a5097266-8" name="rest_code_a9854f83603c4f6c8b6c61a4a5097266-8"&gt;&lt;/a&gt;void loop()
&lt;a id="rest_code_a9854f83603c4f6c8b6c61a4a5097266-9" name="rest_code_a9854f83603c4f6c8b6c61a4a5097266-9"&gt;&lt;/a&gt;{
&lt;a id="rest_code_a9854f83603c4f6c8b6c61a4a5097266-10" name="rest_code_a9854f83603c4f6c8b6c61a4a5097266-10"&gt;&lt;/a&gt;  digitalWrite(ledPIN, HIGH);
&lt;a id="rest_code_a9854f83603c4f6c8b6c61a4a5097266-11" name="rest_code_a9854f83603c4f6c8b6c61a4a5097266-11"&gt;&lt;/a&gt;  delay(1000);
&lt;a id="rest_code_a9854f83603c4f6c8b6c61a4a5097266-12" name="rest_code_a9854f83603c4f6c8b6c61a4a5097266-12"&gt;&lt;/a&gt;  digitalWrite(ledPIN, LOW);
&lt;a id="rest_code_a9854f83603c4f6c8b6c61a4a5097266-13" name="rest_code_a9854f83603c4f6c8b6c61a4a5097266-13"&gt;&lt;/a&gt;  delay(1000);
&lt;a id="rest_code_a9854f83603c4f6c8b6c61a4a5097266-14" name="rest_code_a9854f83603c4f6c8b6c61a4a5097266-14"&gt;&lt;/a&gt;}
&lt;/pre&gt;&lt;p&gt;Si todo anduvo bien, al dar play el led verde de nuestra placa STM32F103C8 debería titilar exáctamente cada 1 segundo :)&lt;/p&gt;
&lt;/section&gt;</description><category>arduino</category><guid>http://blog.fisadev.com/posts/programar-stm32f103c8-en-ubuntu-con-arduino-ide/</guid><pubDate>Thu, 04 Aug 2022 12:48:13 GMT</pubDate></item><item><title>Separate IO from algorithms</title><link>http://blog.fisadev.com/posts/separate-io-from-algorithms/</link><dc:creator>Juan Pedro Fisanotti</dc:creator><description>&lt;p&gt;This is an old post I wrote for the Machinalis blog. Machinalis was a company I worked at some years ago, that later on got acquired by Mercado Libre. The old post is no longer online, so I replicated it here to keep it somewhere on the web :)&lt;/p&gt;
&lt;section id="separate-io-from-algorithms"&gt;
&lt;h2&gt;Separate IO from algorithms&lt;/h2&gt;
&lt;p&gt;Being able to write clean, easy to maintain code is one of the most important skills a developer should have. And it isn’t an easy task to accomplish. We will often be presented with complex problems in which there is no clear “clean” solution. But at the same time, there are some simple practices that can help a lot in the path to better code.&lt;/p&gt;
&lt;p&gt;In this post we will talk about one of those practices: separating IO code from algorithms. It’s not rocket science, and many will probably find this obvious. But experience shows that it’s something too often overlooked, and when that happens, the code tends to become messy quite fast.&lt;/p&gt;
&lt;section id="a-not-so-real-example"&gt;
&lt;h3&gt;A not-so-real example&lt;/h3&gt;
&lt;p&gt;Let’s start with a hypothetical task (later on we will look at a more real example). It will be something quite simple, but bear in mind I’m using it as a vehicle to present some ideas. In real life I would probably just use &lt;code class="docutils literal"&gt;collections.Counter&lt;/code&gt; and the csv module :)&lt;/p&gt;
&lt;p&gt;Imagine we have a .csv file, in which each line has the name of a developer and the language he uses:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a id="rest_code_f43999a86dca446bab0313fe3ca3957c-1" name="rest_code_f43999a86dca446bab0313fe3ca3957c-1"&gt;&lt;/a&gt;Guido Van Rossum,Python
&lt;a id="rest_code_f43999a86dca446bab0313fe3ca3957c-2" name="rest_code_f43999a86dca446bab0313fe3ca3957c-2"&gt;&lt;/a&gt;Dennis Ritchie,C
&lt;a id="rest_code_f43999a86dca446bab0313fe3ca3957c-3" name="rest_code_f43999a86dca446bab0313fe3ca3957c-3"&gt;&lt;/a&gt;Armin Ronacher,Python
&lt;a id="rest_code_f43999a86dca446bab0313fe3ca3957c-4" name="rest_code_f43999a86dca446bab0313fe3ca3957c-4"&gt;&lt;/a&gt;Larry Wall,Perl
&lt;a id="rest_code_f43999a86dca446bab0313fe3ca3957c-5" name="rest_code_f43999a86dca446bab0313fe3ca3957c-5"&gt;&lt;/a&gt;...
&lt;/pre&gt;&lt;p&gt;And we are asked to develop a small program that counts how many developers each language has. It must produce these results via standard output:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a id="rest_code_b4dc6d2923e440fe95d6ae2285d6c318-1" name="rest_code_b4dc6d2923e440fe95d6ae2285d6c318-1"&gt;&lt;/a&gt;Python: 2
&lt;a id="rest_code_b4dc6d2923e440fe95d6ae2285d6c318-2" name="rest_code_b4dc6d2923e440fe95d6ae2285d6c318-2"&gt;&lt;/a&gt;Perl: 1
&lt;a id="rest_code_b4dc6d2923e440fe95d6ae2285d6c318-3" name="rest_code_b4dc6d2923e440fe95d6ae2285d6c318-3"&gt;&lt;/a&gt;C: 1
&lt;a id="rest_code_b4dc6d2923e440fe95d6ae2285d6c318-4" name="rest_code_b4dc6d2923e440fe95d6ae2285d6c318-4"&gt;&lt;/a&gt;...
&lt;/pre&gt;&lt;p&gt;The code we would write to solve the task could be something like this:&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a id="rest_code_f4f23829f7cb4b258d0060073dd54ae0-1" name="rest_code_f4f23829f7cb4b258d0060073dd54ae0-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;count_developers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_f4f23829f7cb4b258d0060073dd54ae0-2" name="rest_code_f4f23829f7cb4b258d0060073dd54ae0-2"&gt;&lt;/a&gt;    &lt;span class="n"&gt;quantities&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;a id="rest_code_f4f23829f7cb4b258d0060073dd54ae0-3" name="rest_code_f4f23829f7cb4b258d0060073dd54ae0-3"&gt;&lt;/a&gt;    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;developers_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_f4f23829f7cb4b258d0060073dd54ae0-4" name="rest_code_f4f23829f7cb4b258d0060073dd54ae0-4"&gt;&lt;/a&gt;        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;developers_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_f4f23829f7cb4b258d0060073dd54ae0-5" name="rest_code_f4f23829f7cb4b258d0060073dd54ae0-5"&gt;&lt;/a&gt;            &lt;span class="n"&gt;developer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;language&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;','&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_f4f23829f7cb4b258d0060073dd54ae0-6" name="rest_code_f4f23829f7cb4b258d0060073dd54ae0-6"&gt;&lt;/a&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;language&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;quantities&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_f4f23829f7cb4b258d0060073dd54ae0-7" name="rest_code_f4f23829f7cb4b258d0060073dd54ae0-7"&gt;&lt;/a&gt;                &lt;span class="n"&gt;quantities&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;language&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;a id="rest_code_f4f23829f7cb4b258d0060073dd54ae0-8" name="rest_code_f4f23829f7cb4b258d0060073dd54ae0-8"&gt;&lt;/a&gt;            &lt;span class="n"&gt;quantities&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;language&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;a id="rest_code_f4f23829f7cb4b258d0060073dd54ae0-9" name="rest_code_f4f23829f7cb4b258d0060073dd54ae0-9"&gt;&lt;/a&gt;
&lt;a id="rest_code_f4f23829f7cb4b258d0060073dd54ae0-10" name="rest_code_f4f23829f7cb4b258d0060073dd54ae0-10"&gt;&lt;/a&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;language&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;quantity&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;quantities&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;a id="rest_code_f4f23829f7cb4b258d0060073dd54ae0-11" name="rest_code_f4f23829f7cb4b258d0060073dd54ae0-11"&gt;&lt;/a&gt;        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="si"&gt;{l}&lt;/span&gt;&lt;span class="s1"&gt;: &lt;/span&gt;&lt;span class="si"&gt;{q}&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;language&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;quantity&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;And it works, it gets the job done. Even more: it looks like simple code, clean code.&lt;/p&gt;
&lt;p&gt;But it has some not-so-obvious problems:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;What if we want to write tests for it? That would be a problem: the tests would either have to create a file to use as input, and capture the standard output to check the results, or use lots of complex mocking to avoid the interaction with real files and real standard output.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What if at some point we need to count developers from a different source, like a json API response? We would need to create a .csv file just to be able to feed it into this function, even if our input data doesn’t come in a file.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What if we need to use the output in a different way instead of showing it to the user via standard output? This function forces the results to be shown in that particular way.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All these issues have the same root: our code is doing two things at the same time, that should be separated. Our program is dealing with the IO logic (reading files, showing results) and the algorithms itself (the “business logic”) in a single piece of code.&lt;/p&gt;
&lt;p&gt;In this simple example it would be trivial to refactor the code to solve any of those issues. But that kind of refactors (changes to the input and output formats of a piece of business logic) tends not to be so trivial in real life code.&lt;/p&gt;
&lt;p&gt;A better approach is then to follow that simple rule we mentioned in the beginning: to separate IO code from algorithms. Following that rule, our solution would look more like this:&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a id="rest_code_f1b0af8c0d2941538ec88288f80fa2d0-1" name="rest_code_f1b0af8c0d2941538ec88288f80fa2d0-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;read_developers_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_f1b0af8c0d2941538ec88288f80fa2d0-2" name="rest_code_f1b0af8c0d2941538ec88288f80fa2d0-2"&gt;&lt;/a&gt;    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;developers_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_f1b0af8c0d2941538ec88288f80fa2d0-3" name="rest_code_f1b0af8c0d2941538ec88288f80fa2d0-3"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;','&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_f1b0af8c0d2941538ec88288f80fa2d0-4" name="rest_code_f1b0af8c0d2941538ec88288f80fa2d0-4"&gt;&lt;/a&gt;                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;developers_file&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;a id="rest_code_f1b0af8c0d2941538ec88288f80fa2d0-5" name="rest_code_f1b0af8c0d2941538ec88288f80fa2d0-5"&gt;&lt;/a&gt;
&lt;a id="rest_code_f1b0af8c0d2941538ec88288f80fa2d0-6" name="rest_code_f1b0af8c0d2941538ec88288f80fa2d0-6"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;count_developers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;developers&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_f1b0af8c0d2941538ec88288f80fa2d0-7" name="rest_code_f1b0af8c0d2941538ec88288f80fa2d0-7"&gt;&lt;/a&gt;    &lt;span class="n"&gt;quantities&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;a id="rest_code_f1b0af8c0d2941538ec88288f80fa2d0-8" name="rest_code_f1b0af8c0d2941538ec88288f80fa2d0-8"&gt;&lt;/a&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;developer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;language&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;developers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_f1b0af8c0d2941538ec88288f80fa2d0-9" name="rest_code_f1b0af8c0d2941538ec88288f80fa2d0-9"&gt;&lt;/a&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;language&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;quantities&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_f1b0af8c0d2941538ec88288f80fa2d0-10" name="rest_code_f1b0af8c0d2941538ec88288f80fa2d0-10"&gt;&lt;/a&gt;            &lt;span class="n"&gt;quantities&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;language&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;a id="rest_code_f1b0af8c0d2941538ec88288f80fa2d0-11" name="rest_code_f1b0af8c0d2941538ec88288f80fa2d0-11"&gt;&lt;/a&gt;        &lt;span class="n"&gt;quantities&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;language&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;a id="rest_code_f1b0af8c0d2941538ec88288f80fa2d0-12" name="rest_code_f1b0af8c0d2941538ec88288f80fa2d0-12"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;quantities&lt;/span&gt;
&lt;a id="rest_code_f1b0af8c0d2941538ec88288f80fa2d0-13" name="rest_code_f1b0af8c0d2941538ec88288f80fa2d0-13"&gt;&lt;/a&gt;
&lt;a id="rest_code_f1b0af8c0d2941538ec88288f80fa2d0-14" name="rest_code_f1b0af8c0d2941538ec88288f80fa2d0-14"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;show_report&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;quantities&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_f1b0af8c0d2941538ec88288f80fa2d0-15" name="rest_code_f1b0af8c0d2941538ec88288f80fa2d0-15"&gt;&lt;/a&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;language&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;quantity&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;quantities&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;a id="rest_code_f1b0af8c0d2941538ec88288f80fa2d0-16" name="rest_code_f1b0af8c0d2941538ec88288f80fa2d0-16"&gt;&lt;/a&gt;        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="si"&gt;{l}&lt;/span&gt;&lt;span class="s1"&gt;: &lt;/span&gt;&lt;span class="si"&gt;{q}&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;language&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;quantity&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;In this new solution, we clearly divided our code in three blocks: the code dealing with the input file, the counting algorithm itself (business logic), and the code dealing with the output of the results. We can easily test the business logic without mocking or doing real IO. We can easily reuse the business logic in scenarios where the input or output formats are different. Even if we have to support input data coming from a stream, something quite difficult with the previous approach, we could achieve that with simple refactors. This separation leaves the door open for changes in a way the old code didn’t.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="a-real-example"&gt;
&lt;h3&gt;A real example&lt;/h3&gt;
&lt;p&gt;A very common scenario in which this rule is neglected, leading to really ugly code, slow and complex tests, and overall difficult to maintain code, are Django views. Developers too often write much of the business logic of their web apps right into the views. At first sight this doesn’t look “that bad”, the code is clean, simple. It’s just a view doing business stuff. But as we saw before, problems start to arise when we need to write tests, or reuse that business logic in slightly different scenarios.&lt;/p&gt;
&lt;p&gt;When writing the tests, people usually just rely on the &lt;code class="docutils literal"&gt;django.test.client&lt;/code&gt; to solve the “I need to do IO to test this logic” issue. The test client is great, it really solves the need of having to test a view. But the problem is: we shouldn’t be testing a view, when we just need to test a piece of business logic. We are doing lots of unnecessary extra work (url resolving, middlewares, etc), and complicating the test code, when it could have been just a function call.&lt;/p&gt;
&lt;p&gt;And as you can imagine, things get really messy when we need to reuse that business logic that’s buried inside the view.&lt;/p&gt;
&lt;p&gt;So, instead of writing views like this:&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a id="rest_code_a1fe5c8449154439883514ef3236290c-1" name="rest_code_a1fe5c8449154439883514ef3236290c-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;update_score&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_a1fe5c8449154439883514ef3236290c-2" name="rest_code_a1fe5c8449154439883514ef3236290c-2"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# logic to get the current score&lt;/span&gt;
&lt;a id="rest_code_a1fe5c8449154439883514ef3236290c-3" name="rest_code_a1fe5c8449154439883514ef3236290c-3"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# logic to get the matches won&lt;/span&gt;
&lt;a id="rest_code_a1fe5c8449154439883514ef3236290c-4" name="rest_code_a1fe5c8449154439883514ef3236290c-4"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# score = a little extra code calculating the new score&lt;/span&gt;
&lt;a id="rest_code_a1fe5c8449154439883514ef3236290c-5" name="rest_code_a1fe5c8449154439883514ef3236290c-5"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# some more score updating&lt;/span&gt;
&lt;a id="rest_code_a1fe5c8449154439883514ef3236290c-6" name="rest_code_a1fe5c8449154439883514ef3236290c-6"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# the last bits of the score update&lt;/span&gt;
&lt;a id="rest_code_a1fe5c8449154439883514ef3236290c-7" name="rest_code_a1fe5c8449154439883514ef3236290c-7"&gt;&lt;/a&gt;    &lt;span class="n"&gt;returnrender&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'score.html'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'score'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;score&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;We should always try to write views more similar to this:&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a id="rest_code_87c6f643883c4f198d3bb6c7001f4fff-1" name="rest_code_87c6f643883c4f198d3bb6c7001f4fff-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;score_logic&lt;/span&gt;
&lt;a id="rest_code_87c6f643883c4f198d3bb6c7001f4fff-2" name="rest_code_87c6f643883c4f198d3bb6c7001f4fff-2"&gt;&lt;/a&gt;
&lt;a id="rest_code_87c6f643883c4f198d3bb6c7001f4fff-3" name="rest_code_87c6f643883c4f198d3bb6c7001f4fff-3"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;update_score&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_87c6f643883c4f198d3bb6c7001f4fff-4" name="rest_code_87c6f643883c4f198d3bb6c7001f4fff-4"&gt;&lt;/a&gt;    &lt;span class="n"&gt;score&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;score_logic&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update_score&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_87c6f643883c4f198d3bb6c7001f4fff-5" name="rest_code_87c6f643883c4f198d3bb6c7001f4fff-5"&gt;&lt;/a&gt;    &lt;span class="n"&gt;returnrender&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'score.html'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'score'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;score&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/section&gt;
&lt;section id="conclusion"&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Separating IO from algorithms might sound like an obvious advice, but it isn’t, it’s a principle that is often overlooked. And specially in web apps, leading to test suites that take too much time to run, and code that is indeed very hard to maintain.&lt;/p&gt;
&lt;p&gt;It’s a simple rule, easy to follow, and it does prevent serious maintainability problems. So this is my advice: never again miss a chance to separate that function (or view) into dedicated IO and algorithms blocks. Your future self will be thankful :)&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;</description><category>python</category><guid>http://blog.fisadev.com/posts/separate-io-from-algorithms/</guid><pubDate>Mon, 14 Feb 2022 20:55:50 GMT</pubDate></item><item><title>Qué tan especiales son las katanas?</title><link>http://blog.fisadev.com/posts/katanas-especiales/</link><dc:creator>Juan Pedro Fisanotti</dc:creator><description>&lt;a class="reference external image-reference" href="http://blog.fisadev.com/images/katanas-especiales/katana.jpg"&gt;&lt;img alt="/images/katanas-especiales/katana.thumbnail.jpg" src="http://blog.fisadev.com/images/katanas-especiales/katana.thumbnail.jpg"&gt;&lt;/a&gt;
&lt;p&gt;Hay varios aspectos posibles para responder: podemos ver qué tiene de especial desde lo físico en comparación a otras espadas, desde lo técnico (su uso) y podemos ver qué tiene de especial desde lo cultural. Voy a responder con detalle sobre el primer aspecto, un poco menos del segundo, y muy poco del tercero. Pero spoiler alert: la katana no es una espada super especial, como mucha gente quiere creer. Lamentablemente hay mucha desinformación al respecto :)&lt;/p&gt;
&lt;section id="lo-fisico"&gt;
&lt;h2&gt;Lo físico&lt;/h2&gt;
&lt;p&gt;Mucha gente tiene la idea de que las katanas son espadas especialmente livianas y ágiles, o increíblemente filosas, o de un metal extraordinariamente resistente o bueno, en comparación a las espadas del resto del mundo, o especialmente de la Europa medieval y del renacimiento. Lamentablemente la mayoría de estas ideas se arraigan en mitos, perpetrados por juegos, películas, y hasta instructores de artes marciales muy poco informados.&lt;/p&gt;
&lt;section id="peso"&gt;
&lt;h3&gt;Peso:&lt;/h3&gt;
&lt;p&gt;Respecto a su peso y agilidad: la katana típica tenía una hoja de unos 70cm, y pesaba alrededor de 1.1 o 1.2 kg. Obviamente hay mucha variación en estos números, pero son los valores más "normales" en katanas históricas.&lt;/p&gt;
&lt;p&gt;Si queremos comparar eso con espadas Europeas nos encontramos con un problema: la katana es una espada de dos manos, sonaría lógico compararla contra espadas de dos manos, pero para los estándares europeos la katana tiene una hoja muy corta, del largo de una espada de una mano. Así que comparemos con ambos grupos:&lt;/p&gt;
&lt;p&gt;Comparando contra espadas europeas con hojas de tamaño similar, es decir, espadas de una mano, podemos ver que la katana pesa lo mismo que una espada europea típica de ese largo. Las espadas medievales de hojas de 70cm pesaban también alrededor de 1.1 o 1.2 kg. También encontramos variación, pero de vuelta, esos son los valores normales. Así que la katana no tiene ningún tipo de construcción super liviana: pesa literalmente lo mismo que espadas europeas del mismo largo.&lt;/p&gt;
&lt;p&gt;Comparando contra espadas europeas de dos manos notamos que en promedio las katanas son más livianas. Pero es una comparación injusta porque la típica espada europea de dos manos tenía una hoja de 90cm, y no 70cm como la katana. Es decir, casi un 30% más largas. Cuánto pesaba la típica espada de dos manos europea? Alrededor de 1.5kg (de vuelta, con variación). Lo que es perfectamente lógico! Para una espada con hoja un 30% más largo, es esperable que el peso sea un poco mayor, pero no por estar mal hecha o ser más "primitiva", nada de eso. Simplemente es una espada más larga, así que va a poseer más metal.&lt;/p&gt;
&lt;p&gt;Respecto al balance y distribución del peso, también podemos ver que la hoja de la katana es muy similar a espadas europeas de uso comparable. Base más ancha con un poco de distal taper (afinamiento), con un balance alrededor de 10cm de la guarda.&lt;/p&gt;
&lt;p&gt;Con esta información está bastante claro que la katana no es un arma más ágil o rápida que cualquier espada europea similar. Es simplemente una espada más.&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://blog.fisadev.com/images/katanas-especiales/largos.jpeg"&gt;&lt;img alt="/images/katanas-especiales/largos.thumbnail.jpeg" src="http://blog.fisadev.com/images/katanas-especiales/largos.thumbnail.jpeg"&gt;&lt;/a&gt;
&lt;p&gt;(comparemos el largo de la hoja de la katana, respecto a otras espadas europeas. Incluso el sable victoriano de una mano tiene una hoja más larga)&lt;/p&gt;
&lt;/section&gt;
&lt;section id="filo"&gt;
&lt;h3&gt;Filo:&lt;/h3&gt;
&lt;p&gt;Un aspecto interesante de la katana es que por su construcción, el filo de la espada está compuesto de un acero más duro que el que se usa para su espina. Esto tiene algunas ventajas respecto al filo, pero no son las ventajas que la gente suele imaginar.&lt;/p&gt;
&lt;p&gt;Cualquier acero, por más blando que sea, se puede afilar hasta ser comparable un bisturí. El problema de un acero blando no es que no pueda ser filoso, sino que ese filo se va a arruinar mucho más rápido con el uso. Tener un acero muy duro en el filo, permite que ese filo dure más, que requiera menos mantenimiento.&lt;/p&gt;
&lt;p&gt;En comparación a espadas europeas, el filo de las katanas suele ser un poco más duro. Ergo, suele mantenerse afilada un poco más de tiempo. Pero no es una diferencia abismal tampoco.&lt;/p&gt;
&lt;p&gt;Y también esto trae problemas: un filo levemente más duro, es también un filo levemente más propenso a quebrarse. Es más probable que el filo de una katana se quiebre y se le hagan muescas, que son muy difíciles de arreglar, en golpes que una espada europea por lo general resistiría un poco mejor.&lt;/p&gt;
&lt;p&gt;Y hay otro aspecto super importante a la hora de evaluar qué tan bien corta una espada: el espesor de la hoja. Una hoja más fina tiene mucha mejor capacidad de corte que una hoja gruesa, por la resistencia que debe vencer al entrar en el blanco. Y en este aspecto la katana es problemática: la hoja típica de una katana es muy gruesa en términos de espadas. Hay espadas de otras culturas, como las tulwars de la India, que son muchísimo más finas, y en la práctica por ende son muchísimo mejores cortando que lo que es una katana.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="calidad-o-resistencia-del-metal"&gt;
&lt;h3&gt;Calidad o resistencia del metal:&lt;/h3&gt;
&lt;p&gt;El mito de que el acero de las katanas es una especie de super acero increíblemente bueno, tiene pocas bases en la realidad. Lo cierto es que la materia prima que se conseguía en el Japón feudal tenía muchas inclusiones de materiales no deseados (similar a muchas partes del mundo), y el proceso de plegado tiene como objetivo remover parte de esas inclusiones, y distribuir más homogéneamente las que no se quitan. El resultado es un buen acero, sin dudas. Pero no un acero extraordinario. Cualquier acero moderno es muchísimo más puro, y el tratamiento térmico preciso moderno logra prestaciones y resistencias muchísimo mejores que las técnicas históricas de cualquier cultura, incluido Japón.&lt;/p&gt;
&lt;p&gt;Mucha gente cree que ese proceso de plegado era una especie de tecnología super avanzada exclusiva de Japón, que el resto del mundo no conocía y por eso generaban aceros inferiores. Nada más equivocado: en Europa se realizaban técnicas similares (plegado, y otras incluso más complejas, como el forjado en patrón de espadas de la era vikinga). Pero con el tiempo en Europa se desarrollaron hornos que lograban aceros más puros, haciendo menos necesario el proceso de plegado. Era algo común, y que en un punto se volvió obsoleto.&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://blog.fisadev.com/images/katanas-especiales/forjado-patron.jpg"&gt;&lt;img alt="/images/katanas-especiales/forjado-patron.thumbnail.jpg" src="http://blog.fisadev.com/images/katanas-especiales/forjado-patron.thumbnail.jpg"&gt;&lt;/a&gt;
&lt;p&gt;(forjado en patrón, técnica similar al plegado pero de mayor complejidad, muy presente en espadas vikingas)&lt;/p&gt;
&lt;/section&gt;
&lt;section id="construccion"&gt;
&lt;h3&gt;Construcción:&lt;/h3&gt;
&lt;p&gt;En esto las katanas tienen una característica conocida por muchos, que es poco común: la diferencia en el acero del filo vs de al espina de la espada. Esto se logra utilizando aceros de diferente grado de carbono, y también realizando un templado diferenciado de la hoja (templando más el filo que la espina).&lt;/p&gt;
&lt;p&gt;Esto permite lidiar con los problemas de las impurezas, generando un muy buen filo bastante duro, pero montado en una espina con un más capacidad para ceder y no quebrarse tan fácilmente.&lt;/p&gt;
&lt;p&gt;Pero no es una característica exclusiva de las katanas. En Europa también existen ejemplos históricos de construcción similar: una espina central de acero más blando, con filos de acero más duro.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="curvatura"&gt;
&lt;h3&gt;Curvatura:&lt;/h3&gt;
&lt;p&gt;Un detalle pero vale la pena aclararlo: en Europa también se usaban espadas curvas, y mucho. No se trata de una innovación exclusiva de Japón, o de algo objetivamente superior que solo ellos hacían.&lt;/p&gt;
&lt;p&gt;Espada recta vs espada curva es un debate que tiene cientos, si no miles de años, y en todas las culturas se dio variedad de opinión al respecto. El contexto muchas veces hizo que una u otra sean más adecuadas en diferentes lugares y épocas. En Europa, las armaduras dictaron una tendencia hacia las espadas rectas (que logran mejores estocadas, y cortes levemente inferiores), simplemente porque cortar hacia una armadura no logra nada.&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://blog.fisadev.com/images/katanas-especiales/kriegsmesser.jpg"&gt;&lt;img alt="/images/katanas-especiales/kriegsmesser.thumbnail.jpg" src="http://blog.fisadev.com/images/katanas-especiales/kriegsmesser.thumbnail.jpg"&gt;&lt;/a&gt;
&lt;p&gt;(kriegsmesser europeo)&lt;/p&gt;
&lt;/section&gt;
&lt;section id="proteccion"&gt;
&lt;h3&gt;Protección:&lt;/h3&gt;
&lt;p&gt;Otro aspecto relativamente interesante es la elección del estilo de guarda que tienen las katanas: un disco pequeño. Es discutible, pero por lo general se considera que ofrece un nivel mucho menor de protección en comparación a otros estilos de guardas, como la cruciforme o alternativas más elaboradas.&lt;/p&gt;
&lt;p&gt;Pero más allá de la opinión que se tenga respecto a su utilidad, el tener una guarda con forma de disco no es una característica exclusiva de las katanas. Hay otros tipos de espadas asiáticas con guardas similares (como los Dao chinos).&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://blog.fisadev.com/images/katanas-especiales/dao.jpg"&gt;&lt;img alt="/images/katanas-especiales/dao.thumbnail.jpg" src="http://blog.fisadev.com/images/katanas-especiales/dao.thumbnail.jpg"&gt;&lt;/a&gt;
&lt;p&gt;(Dao chino)&lt;/p&gt;
&lt;/section&gt;
&lt;section id="rigidez"&gt;
&lt;h3&gt;Rigidez:&lt;/h3&gt;
&lt;p&gt;Un último aspecto interesante es que en comparación a las espadas europeas, la katana suele tener una hoja un tanto más rígida, menos elástica. Esto tiene también sus ventajas y problemas.&lt;/p&gt;
&lt;p&gt;La principal ventaja es que hace más fácil cortar, es un poco más permisiva si la técnica del atacante no es tan buena. Las hojas europeas requieren mejor alineación del filo para cortar adecuadamente, mientras que con una katana se puede tener el filo un poco peor alineado (por falla de la técnica del usuario), pero igual cortar de forma efectiva. Esto la hace bastante amigable para novatos. Pero un cortador experto puede cortar igual de bien con ambas.&lt;/p&gt;
&lt;p&gt;Claramente también ayuda un poco en las estocadas, ya que la flexión es energía perdida.&lt;/p&gt;
&lt;p&gt;La principal desventaja es que la elasticidad de las espadas europeas las hace más duraderas. Un impacto muy fuerte lateral flexiona la hoja, pero la misma vuelve a su forma original, como un resorte. En el caso de la katana, por cómo son tratados los aceros que la componen, tiene más tendencia a doblarse y permanecer doblada en lugar de volver a su forma original.&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://blog.fisadev.com/images/katanas-especiales/flexibilidad.jpg"&gt;&lt;img alt="/images/katanas-especiales/flexibilidad.thumbnail.jpg" src="http://blog.fisadev.com/images/katanas-especiales/flexibilidad.thumbnail.jpg"&gt;&lt;/a&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="lo-tecnico"&gt;
&lt;h2&gt;Lo técnico&lt;/h2&gt;
&lt;p&gt;Mucha gente tiene la idea de que en Japón los samurais dedicaban su vida a estudiar el combate con espada, desarrollando técnicas super avanzadas, mientras que en Europa la gente se pegaba garrotasos a lo bruto, sin técnica alguna.&lt;/p&gt;
&lt;p&gt;La realidad, de vuelta, no es esa. En cambio en ambos lugares existieron y se desarrollaron artes marciales muy avanzadas de combate con espada. Sistemas completos con principios, técnicas, variaciones de estilo, etc.&lt;/p&gt;
&lt;p&gt;Simplemente que en la cultura popular, las artes marciales asiáticas se difundieron y modernizaron muchísimo, mientras que las europeas fueron prácticamente olvidadas.&lt;/p&gt;
&lt;p&gt;Pero hoy en día existe mucha gente practicando artes marciales históricas europeas (HEMA), utilizando manuscritos medievales y del renacimiento escritos por los mismos maestros que enseñaban en esas épocas, para revivir dichas artes.&lt;/p&gt;
&lt;p&gt;Y lo interesante es que hay muchísimo en común entre ambos mundos. Hay técnicas y posturas que pueden encontrarse casi idénticas entre manuscritos japoneses e italianos. Los principios que guían ambas artes también son muy muy similares.&lt;/p&gt;
&lt;p&gt;En definitiva, no existen tantas formas diferentes de usar una espada de dos manos y poco más de 1kg de manera efectiva. Quienes usaban técnicas efectivas sobrevivían, quienes no, morían. Y por ello ambas culturas luego de siglos de uso, llegaron a conclusiones relativamente similares.&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://blog.fisadev.com/images/katanas-especiales/fiore.jpg"&gt;&lt;img alt="/images/katanas-especiales/fiore.thumbnail.jpg" src="http://blog.fisadev.com/images/katanas-especiales/fiore.thumbnail.jpg"&gt;&lt;/a&gt;
&lt;p&gt;(página del manuscrito "Il Fior di Battaglia", escrito en el 1400. Versión completa online: &lt;a class="reference external" href="https://wiktenauer.com/wiki/Fior_di_Battaglia_(MS_Ludwig_XV_13)"&gt;Fior di Battaglia (MS Ludwig XV 13)&lt;/a&gt; )&lt;/p&gt;
&lt;/section&gt;
&lt;section id="lo-cultural"&gt;
&lt;h2&gt;Lo cultural&lt;/h2&gt;
&lt;p&gt;En esto puede haber una diferencia muy importante entre la katana y las espadas de Europa (no hablo de otras culturas por que no conozco tanto).&lt;/p&gt;
&lt;p&gt;En Europa la espada siempre tuvo un poco de "mística", pero no al nivel de religiosidad que adquirieron las katanas en Japón.&lt;/p&gt;
&lt;p&gt;Si en Europa alguien pensaba que podía hacer una espada con mejor diseño, más efectiva, la hacía y nadie lo iba a mirar como un "irrespetuoso de la cultura de la espada". Eso permitió muchísima más variación de formatos y estilos que lo que vemos en Japón. No es que en Japón las katanas no variaban, pero son muy pequeñas variaciones en comparación. Una hoja un poco más larga, una curva un poco menos pronunciada, una guarda un poco más amplia, más o menos mesas en la hoja, etc. Mientras que en Europa en el mismo tiempo, se pasó de guardas de cruz a guardas que cubrían toda la mano, al mismo tiempo había hojas curvas y rectas, hojas con filos paralelos o hojas super triangulares, muy anchas y muy angostas, cruces y pomos de decenas de formatos, etc.&lt;/p&gt;
&lt;p&gt;Esto también llevó a que Japón valore y conserve muchísimo mejor sus espadas históricas, y que se desarrollen incluso artes de conservación alrededor de ellas. Una hoja del año 1500 puede verse hoy en perfectas condiciones, mantenida por generaciones de pulidores, y familias que las atesoraron con valor hasta religioso.&lt;/p&gt;
&lt;p&gt;En Europa en cambio, la mayoría de las que sobrevivieron se encuentran super maltratadas, mal mantenidas, oxidadas, etc. Y por lo general, luego de años de estar tiradas o escondidas en algún lugar, sin que se les preste demasiada atención.&lt;/p&gt;
&lt;p&gt;Esto contribuyó mucho al mito de que las katanas eran especialmente bien hechas, por culpa de ver hojas en estado casi perfecto de un lado, mientras que del otro solo veíamos cosas oxidadas y en estado de abandono.&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://blog.fisadev.com/images/katanas-especiales/conservacion_katana.jpeg"&gt;&lt;img alt="/images/katanas-especiales/conservacion_katana.thumbnail.jpeg" src="http://blog.fisadev.com/images/katanas-especiales/conservacion_katana.thumbnail.jpeg"&gt;&lt;/a&gt;
&lt;a class="reference external image-reference" href="http://blog.fisadev.com/images/katanas-especiales/conservacion_europea.jpeg"&gt;&lt;img alt="/images/katanas-especiales/conservacion_europea.thumbnail.jpeg" src="http://blog.fisadev.com/images/katanas-especiales/conservacion_europea.thumbnail.jpeg"&gt;&lt;/a&gt;
&lt;p&gt;(estado típico de conservación de una katana vs el estado típico de conservación de una espada europea)&lt;/p&gt;
&lt;/section&gt;
&lt;section id="en-resumen"&gt;
&lt;h2&gt;En resumen&lt;/h2&gt;
&lt;p&gt;La katana es un arma con un lugar muy especial dentro del mundo actual de espadas, pero más por accidentes históricos y diferencias culturales, que por las características del arma en sí o de sus técnicas asociadas.&lt;/p&gt;
&lt;/section&gt;</description><category>swords</category><guid>http://blog.fisadev.com/posts/katanas-especiales/</guid><pubDate>Thu, 13 Aug 2020 22:30:00 GMT</pubDate></item><item><title>Encrypt a dir with Ecryptfs</title><link>http://blog.fisadev.com/posts/encrypt-a-dir-with-ecryptfs/</link><dc:creator>Juan Pedro Fisanotti</dc:creator><description>&lt;p&gt;This is a simple tutorial on how to have an encrypted directory in your Linux, by using Ecryptfs.&lt;/p&gt;
&lt;p&gt;There are many alternatives to do the same, and I'm not qualified to do a deep comparison of them.
But I've been using this solution for many years already, and it works like a charm.
It relies on command line tools only which are easy to automate.
And because it uses a mounted filesystem, it's pretty transparent to other tools (like backups,
editors, etc).
There's absolutely no need for specialized tools to work with your encrypted files.&lt;/p&gt;
&lt;section id="dependencies"&gt;
&lt;h2&gt;Dependencies&lt;/h2&gt;
&lt;pre class="code bash"&gt;&lt;a id="rest_code_b0178fc536db4056ab11e6d56d1139a1-1" name="rest_code_b0178fc536db4056ab11e6d56d1139a1-1"&gt;&lt;/a&gt;sudo apt install ecryptfs-utils
&lt;/pre&gt;&lt;/section&gt;
&lt;section id="initial-setup-one-time-only"&gt;
&lt;h2&gt;Initial setup (one time only)&lt;/h2&gt;
&lt;p&gt;You need to do this only once to setup your dir.
After that you won't have to run these steps in your daily use.&lt;/p&gt;
&lt;p&gt;First create two dirs:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;A dir where you will work with your files when the encrypted filesystem is mounted.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A dir where the encrypted data will live. You should &lt;strong&gt;never&lt;/strong&gt; edit its contents by yourself.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code bash"&gt;&lt;a id="rest_code_54e53163016b4b8eb9d68e618a9dc68a-1" name="rest_code_54e53163016b4b8eb9d68e618a9dc68a-1"&gt;&lt;/a&gt;mkdir super_secret_things
&lt;a id="rest_code_54e53163016b4b8eb9d68e618a9dc68a-2" name="rest_code_54e53163016b4b8eb9d68e618a9dc68a-2"&gt;&lt;/a&gt;mkdir super_secret_things_encrypted
&lt;/pre&gt;&lt;p&gt;Then, mount the filesystem for the first time:&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a id="rest_code_4e3ab44487cb47a5a31fad94a43d5988-1" name="rest_code_4e3ab44487cb47a5a31fad94a43d5988-1"&gt;&lt;/a&gt;sudo mount super_secret_things_encrypted super_secret_things -t ecryptfs
&lt;/pre&gt;&lt;p&gt;This will ask you a bunch of questions, these are the answers I recommend, plus some explanations:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Passphrase&lt;/strong&gt;: whatever you want to use as password :)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Cipher&lt;/strong&gt;: aes (option 1. This is the algorithm used to encrypt. Aes is pretty good)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Key bytes&lt;/strong&gt;: 32 (option 2. The size of the key, bigger usually means harder to hack)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Plaintext passthrough&lt;/strong&gt;: no (this allows for non-encrypted files to be used along encrypted ones,
which I think is a bad idea. These are your super secret stuff, you need to be sure they are
always encrypted).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Filename encryption&lt;/strong&gt;: yes (fairly obvious. If the answer is no, people can see the names of the
files without having to know the encryption password)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Signature confirmation&lt;/strong&gt;: just press enter.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A confirmation asking whether you are sure you typed everything right, because this is the first
time ecryptfs sees you using this combination of parameters with this directory. Just say yes,
because doh, of course it's the first time.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;And Finally, whether you want ecryptfs to remember the answer to the previous question, so it
doesn't ask you "are you sure? this is the first time..." every time you mount the encrypted dir.
Answer yes.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;You will need to remember the answers&lt;/strong&gt; you chose, to be able to re-mount the encrypted dir in
the future! For me this became muscle memory: "1 2 n y enter".&lt;/p&gt;
&lt;p&gt;And that's it! Encrypted dir created!&lt;/p&gt;
&lt;/section&gt;
&lt;section id="daily-use"&gt;
&lt;h2&gt;Daily use&lt;/h2&gt;
&lt;p&gt;Whenever you need to work with your encrypted files, the steps are this:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Mount the encrypted dir&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="code bash"&gt;&lt;a id="rest_code_4b82c95ef41241deb8bb12d4513ee5d8-1" name="rest_code_4b82c95ef41241deb8bb12d4513ee5d8-1"&gt;&lt;/a&gt;sudo mount super_secret_things_encrypted super_secret_things -t ecryptfs
&lt;a id="rest_code_4b82c95ef41241deb8bb12d4513ee5d8-2" name="rest_code_4b82c95ef41241deb8bb12d4513ee5d8-2"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# answer "1 2 n y enter", or whatever you chose instead&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;You can also avoid having to answer all the questions, by passing all these extra parameters:&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a id="rest_code_178d8edf55f247648745d75e771decd2-1" name="rest_code_178d8edf55f247648745d75e771decd2-1"&gt;&lt;/a&gt;sudo mount super_secret_things_encrypted super_secret_things -t ecryptfs -o &lt;span class="nv"&gt;ecryptfs_cipher&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;aes,ecryptfs_key_bytes&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;32&lt;/span&gt;,ecryptfs_passthrough&lt;span class="o"&gt;=&lt;/span&gt;n,ecryptfs_enable_filename_crypto&lt;span class="o"&gt;=&lt;/span&gt;y,ecryptfs_fnek_sig&lt;span class="o"&gt;=&lt;/span&gt;6b8de1a1e22ae45c
&lt;a id="rest_code_178d8edf55f247648745d75e771decd2-2" name="rest_code_178d8edf55f247648745d75e771decd2-2"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# (the "encryptfs_fnek_sig" signature is the one that the mount command asks you to verify in the final step, when not receiving all the extra params)&lt;/span&gt;
&lt;/pre&gt;&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;&lt;p&gt;Work with your files inside &lt;cite&gt;super_secret_things&lt;/cite&gt; (REMEMBER!!! never edit the contents of &lt;cite&gt;super_secret_things_encrypted&lt;/cite&gt; by yourself)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Un-mount the encrypted dir&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="code bash"&gt;&lt;a id="rest_code_6f52e342cdc540f490a637237af39665-1" name="rest_code_6f52e342cdc540f490a637237af39665-1"&gt;&lt;/a&gt;sudo umount super_secret_things
&lt;/pre&gt;&lt;p&gt;Of course, you can automate these into scripts, alias in your shell, etc.&lt;/p&gt;
&lt;p&gt;Hope this is as useful to you as it was for me :)&lt;/p&gt;
&lt;/section&gt;</description><guid>http://blog.fisadev.com/posts/encrypt-a-dir-with-ecryptfs/</guid><pubDate>Wed, 11 Mar 2020 23:30:00 GMT</pubDate></item><item><title>Longsword by Leonardo Daneluz, my best sword!</title><link>http://blog.fisadev.com/posts/daneluz-longsword-best-sword/</link><dc:creator>Juan Pedro Fisanotti</dc:creator><description>&lt;section id="the-sword"&gt;
&lt;h2&gt;The sword&lt;/h2&gt;
&lt;p&gt;(click the photos to see the full resolution versions)&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://blog.fisadev.com/images/daneluz-longsword-best-sword/1.jpg"&gt;&lt;img alt="/images/daneluz-longsword-best-sword/1.thumbnail.jpg" src="http://blog.fisadev.com/images/daneluz-longsword-best-sword/1.thumbnail.jpg"&gt;&lt;/a&gt;
&lt;p&gt;It's a longsword made in the typical style of the year 1400, with a special reinforced tip (useful to fight against armor), and an actual medieval coin in the pommel.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Weight:&lt;/strong&gt; 1.515 kg.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Length:&lt;/strong&gt; 119.5 cm (118.5 cm not counting the pin block), 93 cm blade.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Width:&lt;/strong&gt; 5.55 cm at the base of the blade.Thickness: 6 mm at the base of the blade, then tapers to 3.75 mm at the thinnest point (near the center of percussion), but then thickens again to 5 mm near the tip.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Blade steel:&lt;/strong&gt; quenched and tempered SAE 5160.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Guard steel:&lt;/strong&gt; quenched and tempered AISI 1045.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Grip:&lt;/strong&gt; made of really hard wood (Lapacho), with both hexagonal (near the guard) and oval (near the pommel) cross sections. Covered in string to give it the texture, resin, and then cow leather above it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Coin:&lt;/strong&gt; the coin in the pommel is an actual coin from the year 1180, with an image of  &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Manuel_I_Komnenos"&gt;Manuel I Komnenos&lt;/a&gt;, a Byzantine emperor.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Maker:&lt;/strong&gt; Leonardo Daneluz. More of his high quality work in &lt;a class="reference external" href="https://www.facebook.com/leonardo.daneluz/photos"&gt;his facebook page&lt;/a&gt;.&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://blog.fisadev.com/images/daneluz-longsword-best-sword/2.jpg"&gt;&lt;img alt="/images/daneluz-longsword-best-sword/2.thumbnail.jpg" src="http://blog.fisadev.com/images/daneluz-longsword-best-sword/2.thumbnail.jpg"&gt;&lt;/a&gt;
&lt;p&gt;Gosh, I'm really happy with this sword :D&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://blog.fisadev.com/images/daneluz-longsword-best-sword/3.jpg"&gt;&lt;img alt="/images/daneluz-longsword-best-sword/3.thumbnail.jpg" src="http://blog.fisadev.com/images/daneluz-longsword-best-sword/3.thumbnail.jpg"&gt;&lt;/a&gt;
&lt;a class="reference external image-reference" href="http://blog.fisadev.com/images/daneluz-longsword-best-sword/4.jpg"&gt;&lt;img alt="/images/daneluz-longsword-best-sword/4.thumbnail.jpg" src="http://blog.fisadev.com/images/daneluz-longsword-best-sword/4.thumbnail.jpg"&gt;&lt;/a&gt;
&lt;p&gt;With "Il Fior Di Battaglia", a medieval martial arts manuscript from around 1400 (&lt;a class="reference external" href="https://wiktenauer.com/wiki/Fior_di_Battaglia_(MS_Ludwig_XV_13)"&gt;you can read it online!&lt;/a&gt;). People from that time didn't just crudely bash themselves with blunt heavy swords. In reality, swords were fairly light and agile, quite sharp, and they had very developed martial arts around their usage. Luckily many manuscripts from the time survive, which we can use to revive those martial arts (google "HEMA" if you want to see people practicing them).&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://blog.fisadev.com/images/daneluz-longsword-best-sword/5.jpg"&gt;&lt;img alt="/images/daneluz-longsword-best-sword/5.thumbnail.jpg" src="http://blog.fisadev.com/images/daneluz-longsword-best-sword/5.thumbnail.jpg"&gt;&lt;/a&gt;
&lt;a class="reference external image-reference" href="http://blog.fisadev.com/images/daneluz-longsword-best-sword/6.jpg"&gt;&lt;img alt="/images/daneluz-longsword-best-sword/6.thumbnail.jpg" src="http://blog.fisadev.com/images/daneluz-longsword-best-sword/6.thumbnail.jpg"&gt;&lt;/a&gt;
&lt;p&gt;Here you can see the pin, which is the end of the tang (the part of the blade that continues inside the grip). And also a glimpse of the coin (better pictures below).&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://blog.fisadev.com/images/daneluz-longsword-best-sword/7.jpg"&gt;&lt;img alt="/images/daneluz-longsword-best-sword/7.thumbnail.jpg" src="http://blog.fisadev.com/images/daneluz-longsword-best-sword/7.thumbnail.jpg"&gt;&lt;/a&gt;
&lt;p&gt;The details of the coin. A little shiny because of the oil used to keep the sword from rusting. You can see the figure of &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Manuel_I_Komnenos"&gt;Manuel I Komnenos&lt;/a&gt;.&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://blog.fisadev.com/images/daneluz-longsword-best-sword/8.jpg"&gt;&lt;img alt="/images/daneluz-longsword-best-sword/8.thumbnail.jpg" src="http://blog.fisadev.com/images/daneluz-longsword-best-sword/8.thumbnail.jpg"&gt;&lt;/a&gt;
&lt;p&gt;With a rondel dagger, a type of dagger designed to fight people in armor, usually carried by knights and man-at-arms along this kind of swords.&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://blog.fisadev.com/images/daneluz-longsword-best-sword/9.jpg"&gt;&lt;img alt="/images/daneluz-longsword-best-sword/9.thumbnail.jpg" src="http://blog.fisadev.com/images/daneluz-longsword-best-sword/9.thumbnail.jpg"&gt;&lt;/a&gt;
&lt;p&gt;Scolari is a HEMA study/practice group that we founded in Argentina. We focus on the teachings of &lt;a class="reference external" href="https://wiktenauer.com/wiki/Fiore_de%27i_Liberi"&gt;Fiore dei Liberi&lt;/a&gt;, the medieval martial arts master that wrote the manuscript you saw before. &lt;a class="reference external" href="https://www.facebook.com/scolariesgrimahistorica/"&gt;https://www.facebook.com/scolariesgrimahistorica/&lt;/a&gt;&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://blog.fisadev.com/images/daneluz-longsword-best-sword/10.jpg"&gt;&lt;img alt="/images/daneluz-longsword-best-sword/10.thumbnail.jpg" src="http://blog.fisadev.com/images/daneluz-longsword-best-sword/10.thumbnail.jpg"&gt;&lt;/a&gt;
&lt;p&gt;A better picture of the coin, before it was embedded in the pommel.&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://blog.fisadev.com/images/daneluz-longsword-best-sword/11.jpg"&gt;&lt;img alt="/images/daneluz-longsword-best-sword/11.thumbnail.jpg" src="http://blog.fisadev.com/images/daneluz-longsword-best-sword/11.thumbnail.jpg"&gt;&lt;/a&gt;
&lt;p&gt;The sword without the grip and coin. You can see how the blade goes all the way through, sticking out of the pommel. This is how historical swords were built.&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://blog.fisadev.com/images/daneluz-longsword-best-sword/12.jpg"&gt;&lt;img alt="/images/daneluz-longsword-best-sword/12.thumbnail.jpg" src="http://blog.fisadev.com/images/daneluz-longsword-best-sword/12.thumbnail.jpg"&gt;&lt;/a&gt;
&lt;p&gt;To give it its final texture, the artisan not only uses string below the leather, but also above it. After a short while, the top string is removed, and the leather keeps its texture, providing better grip but also a nicer finish.&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://blog.fisadev.com/images/daneluz-longsword-best-sword/13.jpg"&gt;&lt;img alt="/images/daneluz-longsword-best-sword/13.thumbnail.jpg" src="http://blog.fisadev.com/images/daneluz-longsword-best-sword/13.thumbnail.jpg"&gt;&lt;/a&gt;
&lt;p&gt;That's a heck of a thick point.&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://blog.fisadev.com/images/daneluz-longsword-best-sword/14.jpg"&gt;&lt;img alt="/images/daneluz-longsword-best-sword/14.thumbnail.jpg" src="http://blog.fisadev.com/images/daneluz-longsword-best-sword/14.thumbnail.jpg"&gt;&lt;/a&gt;
&lt;p&gt;Leonardo quenching it! :)&lt;/p&gt;
&lt;p&gt;He's well known for the quality and historicity of his work. If you like medieval swords, then you should definitely check &lt;a class="reference external" href="https://www.facebook.com/leonardo.daneluz/photos"&gt;his swords&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Hope you enjoyed it as much as I do. Bah, that's impossible :p&lt;/p&gt;
&lt;p&gt;(Thanks &lt;a class="reference external" href="https://www.facebook.com/ruththelerfotografia/"&gt;Ruth Teller&lt;/a&gt; for most of the photos!)&lt;/p&gt;
&lt;/section&gt;</description><category>hema</category><category>longsword</category><category>swords</category><guid>http://blog.fisadev.com/posts/daneluz-longsword-best-sword/</guid><pubDate>Fri, 12 Jul 2019 23:40:00 GMT</pubDate></item><item><title>The simplest Virtualenv tutorial (Python 3)</title><link>http://blog.fisadev.com/posts/virtualenvs-simplest-tutorial/</link><dc:creator>Juan Pedro Fisanotti</dc:creator><description>&lt;p&gt;Python virtualenvs allow you to have isolated environments, in which you can install python libs and run your programs. This is useful when you have different projects with different requirements, and also to avoid installing python libs at system level.&lt;/p&gt;
&lt;p&gt;This is how to use them in modern versions of python.&lt;/p&gt;
&lt;section id="what-do-i-need"&gt;
&lt;h2&gt;What do I need?&lt;/h2&gt;
&lt;p&gt;Python 3.3 or newer (older versions do have virtualenvs, but they are used in a slightly different way).&lt;/p&gt;
&lt;/section&gt;
&lt;section id="how-do-i-create-a-new-virtualenv"&gt;
&lt;h2&gt;How do I create a new virtualenv?&lt;/h2&gt;
&lt;p&gt;Open a terminal, and run this:&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a id="rest_code_3f75187217334bc6a2d09dcdebf2fe28-1" name="rest_code_3f75187217334bc6a2d09dcdebf2fe28-1"&gt;&lt;/a&gt;python3 -m venv PATH_TO_YOUR_VIRTUALENV
&lt;/pre&gt;&lt;p&gt;The path it receives as a paramenter, is the location for a folder that will be created and will contain your virtualenv inside. It will only contain the virtualenv, &lt;strong&gt;don't&lt;/strong&gt; add any files inside that folder. Treat it like a "system" folder.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a id="rest_code_43aeb42795f44d928f6b49f63d18538e-1" name="rest_code_43aeb42795f44d928f6b49f63d18538e-1"&gt;&lt;/a&gt;python3 -m venv /home/fisa/projects/my_blog/venv
&lt;/pre&gt;&lt;p&gt;(If you are using Windows, the path would instead look something like this: &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;C:\Users\fisa\projects\my_blog\venv&lt;/span&gt;&lt;/code&gt;)&lt;/p&gt;
&lt;/section&gt;
&lt;section id="how-do-i-use-the-virtualenv"&gt;
&lt;h2&gt;How do I use the virtualenv?&lt;/h2&gt;
&lt;p&gt;Each time you open a new terminal (console) to work in your project, you need to &lt;strong&gt;activate&lt;/strong&gt; the virtualenv. The command to activate the virtualenv is different for Linux/MacOS vs Windows.&lt;/p&gt;
&lt;p&gt;On Linux and MacOS, run:&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a id="rest_code_d29020cb6a4e4e7f994704f7fd7c1e2e-1" name="rest_code_d29020cb6a4e4e7f994704f7fd7c1e2e-1"&gt;&lt;/a&gt;&lt;span class="nb"&gt;source&lt;/span&gt; PATH_TO_YOUR_VIRTUALENV/bin/activate
&lt;/pre&gt;&lt;p&gt;(if you are using fish shell, replace &lt;code class="docutils literal"&gt;activate&lt;/code&gt; with &lt;code class="docutils literal"&gt;activate.fish&lt;/code&gt; at the end of that command)&lt;/p&gt;
&lt;p&gt;On Windows:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a id="rest_code_0f22d3a7a4d94be6ae287e405db8dddd-1" name="rest_code_0f22d3a7a4d94be6ae287e405db8dddd-1"&gt;&lt;/a&gt;PATH_TO_YOUR_VIRTUALENV\Scripts\activate.bat
&lt;/pre&gt;&lt;p&gt;From now on, the prompt of the terminal should say something like &lt;code class="docutils literal"&gt;(venv)&lt;/code&gt; at the begining (with the name of your virtualenv). This indicates that you are working inside your virtualenv.&lt;/p&gt;
&lt;p&gt;With your virtualenv activated, if you now install libs with pip (example: &lt;code class="docutils literal"&gt;pip install pandas&lt;/code&gt;), they will be installed inside the virtualenv. If you run a program inside that terminal, it will be able to import any libs installed in the virtualenv.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="that-s-it"&gt;
&lt;h2&gt;That's it?&lt;/h2&gt;
&lt;p&gt;Yep.&lt;/p&gt;
&lt;p&gt;Well, there's more to it, but this is what you need to start using virtualenvs :)&lt;/p&gt;
&lt;/section&gt;
&lt;section id="ok-but"&gt;
&lt;h2&gt;Ok, but...&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;... how do I deactivate the virtualenv? Just close that terminal. Or run &lt;code class="docutils literal"&gt;deactivate&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;... how do I delete the virtualenv? Just delete the folder. Nothing else is created anywhere else.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;... can I move the virtualenv? No. Just delete it, and create a new one in the new location. Virtualenvs are disposable, don't get attached to them :) (your project should define its dependencies either in a &lt;code class="docutils literal"&gt;requirements.txt&lt;/code&gt; or in a &lt;code class="docutils literal"&gt;setup.py&lt;/code&gt;, so you can easily install all the dependencies at once in the new environment)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;</description><guid>http://blog.fisadev.com/posts/virtualenvs-simplest-tutorial/</guid><pubDate>Mon, 15 Apr 2019 22:51:00 GMT</pubDate></item><item><title>Using Keras and TensorFlow with Nvidia gpus under Ubuntu</title><link>http://blog.fisadev.com/posts/using-keras-and-tensorflow-with-nvidia-gpus-under-ubuntu/</link><dc:creator>Juan Pedro Fisanotti</dc:creator><description>&lt;section id="using-keras-and-tensorflow-with-nvidia-gpus-under-ubuntu"&gt;
&lt;h2&gt;Using Keras and TensorFlow with Nvidia gpus under Ubuntu&lt;/h2&gt;
&lt;section id="what-are-all-these-things"&gt;
&lt;h3&gt;What are all these things???&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Keras&lt;/strong&gt;: the Python library that knows how to build and train artificial neural networks.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;TensorFlow&lt;/strong&gt;: the Python library that knows how to do heavy computations both under cpus and gpus, used by Keras.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;CUDA + cuDNN&lt;/strong&gt;: Nvidia utilities to be able to run general purpose computations in the gpu.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Graphics drivers&lt;/strong&gt;: drivers that allow your linux to access and use the graphics card.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="graphics-drivers"&gt;
&lt;h3&gt;Graphics drivers&lt;/h3&gt;
&lt;p&gt;It might be possible to use CUDA without having the graphics drivers installed, but I'm not sure how easy and stable it is.
So my recommendation is to install them first, and verify that they are working.&lt;/p&gt;
&lt;p&gt;Usually it's just installing a package with &lt;code class="docutils literal"&gt;apt&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a id="rest_code_25e28b28512e4039bc7523f3d69de285-1" name="rest_code_25e28b28512e4039bc7523f3d69de285-1"&gt;&lt;/a&gt;sudo apt install nvidia-375
&lt;/pre&gt;&lt;p&gt;But if you are using an Optimus-enabled graphics card (most laptops with Nvidia cards previous to the 10xx generation),
you might need to install the &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;nvidia-prime&lt;/span&gt;&lt;/code&gt; package too.&lt;/p&gt;
&lt;p&gt;The recommended version might be higher in the future, 375 is the one I'm using right now under Ubuntu 16.10.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="cuda-installation"&gt;
&lt;h3&gt;CUDA installation&lt;/h3&gt;
&lt;p&gt;Get both the CUDA installer and the cuDNN installer, from their official websites:
&lt;a class="reference external" href="https://developer.nvidia.com/cuda-downloads"&gt;https://developer.nvidia.com/cuda-downloads&lt;/a&gt; and &lt;a class="reference external" href="https://developer.nvidia.com/cudnn"&gt;https://developer.nvidia.com/cudnn&lt;/a&gt;
(you will need to register in the website and fill a survey to be able to download cuDNN).&lt;/p&gt;
&lt;p&gt;The versions you need to get depend on which versions does TensorFlow support.
You can check this in the official website, at &lt;a class="reference external" href="https://www.tensorflow.org/install/install_linux"&gt;https://www.tensorflow.org/install/install_linux&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;Once you have both installers, first run the cuda installer (replace the name of the file with the one you got):&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a id="rest_code_5a1a5a7ba4374d1da265f42b20a616f6-1" name="rest_code_5a1a5a7ba4374d1da265f42b20a616f6-1"&gt;&lt;/a&gt;sudo sh ./cuda_8.0.61_375.26_linux.run --override
&lt;/pre&gt;&lt;p&gt;It will ask you a few things. Tell "no" to the installation of graphics drivers (you should already have them),
and "yes" to the creation of the symbolic link.&lt;/p&gt;
&lt;p&gt;Then uncompress the cuDNN installer (a file with a name similar to &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;cudnn-8.0-linux-x64-v5.1.tgz&lt;/span&gt;&lt;/code&gt;),
and copy its files into the &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;/usr/local/cuda-8.0&lt;/span&gt;&lt;/code&gt; folder (you should have it from the CUDA installation).
The tar file contains subfolders, be sure to copy the files into the same subfolders in the destination.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="tensorflow-and-keras-installation"&gt;
&lt;h3&gt;TensorFlow and Keras installation&lt;/h3&gt;
&lt;p&gt;Once you have the graphics drivers and CUDA, then it's easy to install TensorFlow and Keras, they are just Python packages:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a id="rest_code_8cac8d32de9442d69dd6dba58d493890-1" name="rest_code_8cac8d32de9442d69dd6dba58d493890-1"&gt;&lt;/a&gt;pip install tensorflow-gpu keras
&lt;/pre&gt;&lt;p&gt;If you aren't using virtualenvs (you should!), you should add &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;--user&lt;/span&gt;&lt;/code&gt; to that command.
I don't recommend installing the packages system-wide with &lt;code class="docutils literal"&gt;sudo&lt;/code&gt;, as with time you will probably need different versions of both
&lt;code class="docutils literal"&gt;tensorflow&lt;/code&gt; and &lt;code class="docutils literal"&gt;keras&lt;/code&gt; for different projects (they both evolve quite quickly).&lt;/p&gt;
&lt;/section&gt;
&lt;section id="running-the-code"&gt;
&lt;h3&gt;Running the code&lt;/h3&gt;
&lt;p&gt;Finally, when running your code you may need to define the &lt;code class="docutils literal"&gt;LD_LIBRARY_PATH&lt;/code&gt; environment variable, for TensorFlow to be able to
find the needed CUDA libraries:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a id="rest_code_334ba23cebfe48be98dd13a088f6aee4-1" name="rest_code_334ba23cebfe48be98dd13a088f6aee4-1"&gt;&lt;/a&gt;LD_LIBRARY_PATH=/usr/local/cuda-8.0/lib64 python your_awesome_code.py
&lt;/pre&gt;&lt;p&gt;This is true also for Jupyter notebooks:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a id="rest_code_2f6f40fadb1e45b593a095a74b096293-1" name="rest_code_2f6f40fadb1e45b593a095a74b096293-1"&gt;&lt;/a&gt;LD_LIBRARY_PATH=/usr/local/cuda-8.0/lib64 jupyter notebook
&lt;/pre&gt;&lt;p&gt;If you are unsure if your code is actually using your gpu, you can paste this snippet into a &lt;code class="docutils literal"&gt;test_device.py&lt;/code&gt; file:&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a id="rest_code_934dca78fda94e708111074c67d93732-1" name="rest_code_934dca78fda94e708111074c67d93732-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tensorflow&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;tf&lt;/span&gt;
&lt;a id="rest_code_934dca78fda94e708111074c67d93732-2" name="rest_code_934dca78fda94e708111074c67d93732-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;sess&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Session&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ConfigProto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;log_device_placement&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;And then run it:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a id="rest_code_49e4c5c3bce54ff9965eb64c1c1dd3fb-1" name="rest_code_49e4c5c3bce54ff9965eb64c1c1dd3fb-1"&gt;&lt;/a&gt;LD_LIBRARY_PATH=/usr/local/cuda-8.0/lib64 python test_device.py
&lt;/pre&gt;&lt;p&gt;It should print a lot of information, but in between you should see something with your graphics card name, like
&lt;code class="docutils literal"&gt;name: GeForce GTX 1070&lt;/code&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;</description><guid>http://blog.fisadev.com/posts/using-keras-and-tensorflow-with-nvidia-gpus-under-ubuntu/</guid><pubDate>Sun, 19 Nov 2017 12:55:28 GMT</pubDate></item><item><title>Customer and code quality</title><link>http://blog.fisadev.com/posts/customer-and-code-quality/</link><dc:creator>Juan Pedro Fisanotti</dc:creator><description>&lt;p&gt;I hear this a lot in the software development community: "the customer doesn't care about the quality of the code, just about features, usability, user experience, etc.".
It has many variations, but the idea remains the same: code quality isn't a factor in the decisions of the customer (internal or external).&lt;/p&gt;
&lt;p&gt;Sometimes it's even used to justify writing, or not refactoring, bad code.
Because the main thing is to give your customer some value, and code quality just doesn't do that.&lt;/p&gt;
&lt;p&gt;I currently believe this is false.
I believe that &lt;strong&gt;customers do care&lt;/strong&gt; about the quality of the code, even if they don't understand what code is or how does it work.&lt;/p&gt;
&lt;section id="cars"&gt;
&lt;h2&gt;Cars&lt;/h2&gt;
&lt;p&gt;When buying a car, would you ask how are the wheels attached to the rest of the car?
You probably wouldn't, you don't care about that.
But what if car X had wheels so special that each time you must change a tire, you need to spend 10.000$?
Suddenly you care about wheel attachment systems.
You would even feel cheated if someone sold you this car without warning you about its wheels.&lt;/p&gt;
&lt;p&gt;Well, no, you don't care about wheel attachment systems specifically.
But you don't want a car that costs lots of money each time it requires some maintainance.
You care about &lt;strong&gt;maintainance costs&lt;/strong&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="software"&gt;
&lt;h2&gt;Software&lt;/h2&gt;
&lt;p&gt;You probably get my point already.&lt;/p&gt;
&lt;p&gt;Software, code, will need maintainance in most projects.
And we know that one of the major factors defining the time (money) required to do code maintainance, is how good it is.
Bad code costs more to maintain because it tends to have more bugs, to spawn new bugs more easily when modifying it, to be harder to read/understand how to change it, etc.&lt;/p&gt;
&lt;p&gt;So the customer might have zero idea regarding what code is.
But they still &lt;strong&gt;care&lt;/strong&gt;, they want software with reasonable maintainance costs and that means code that is decent enough.
And giving them bad code without warning them of its impacts in maintainance, is a way of cheating them.&lt;/p&gt;
&lt;p&gt;Finally, customers tend to be unable to clearly see this relation by themselves, and developers usually don't want to tell them "this is taking too long to modify because we gave you bad quality code".
This may be the reason we got the idea that customers don't care about code, developers just usually fail to explain (or even hide) to them the strong relation between code quality and maintainance costs.
So they never come back asking for "better code".&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://blog.fisadev.com/images/customer-and-code-quality/tech_debt.jpeg"&gt;&lt;img alt="/images/customer-and-code-quality/tech_debt.thumbnail.jpeg" src="http://blog.fisadev.com/images/customer-and-code-quality/tech_debt.thumbnail.jpeg"&gt;&lt;/a&gt;
&lt;p&gt;(comic by &lt;a class="reference external" href="https://twitter.com/vincentdnl"&gt;Vincent Déniel&lt;/a&gt;)&lt;/p&gt;
&lt;/section&gt;</description><guid>http://blog.fisadev.com/posts/customer-and-code-quality/</guid><pubDate>Sun, 17 Sep 2017 19:28:30 GMT</pubDate></item></channel></rss>